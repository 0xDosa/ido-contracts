/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

/// <reference types="@openeth/truffle-typings" />
import BN from "bn.js";

export interface EasyAuctionContract
  extends Truffle.Contract<EasyAuctionInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<EasyAuctionInstance>;
}

export interface IterableOrderedOrderSetWrapperContract
  extends Truffle.Contract<IterableOrderedOrderSetWrapperInstance> {
  "new"(
    meta?: Truffle.TransactionDetails
  ): Promise<IterableOrderedOrderSetWrapperInstance>;
}

export interface EasyAuctionInstance extends Truffle.ContractInstance {
  auctionCounter(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  auctionData(
    arg0: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<[string, string, BN, string, string, BN]>;

  buyOrders(
    arg0: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  donationAccount(txDetails?: Truffle.TransactionDetails): Promise<string>;

  numUsers(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  initiateAuction: {
    (
      _sellToken: string | BN,
      _buyToken: string | BN,
      duration: number | BN | string,
      _sellAmount: number | BN | string,
      _buyAmount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _sellToken: string | BN,
      _buyToken: string | BN,
      duration: number | BN | string,
      _sellAmount: number | BN | string,
      _buyAmount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;
    sendTransaction(
      _sellToken: string | BN,
      _buyToken: string | BN,
      duration: number | BN | string,
      _sellAmount: number | BN | string,
      _buyAmount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _sellToken: string | BN,
      _buyToken: string | BN,
      duration: number | BN | string,
      _sellAmount: number | BN | string,
      _buyAmount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  placeBuyOrders: {
    (
      auctionId: number | BN | string,
      _buyAmount: (number | BN | string)[],
      _sellAmount: (number | BN | string)[],
      _prevBuyOrders: (string | BN)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      auctionId: number | BN | string,
      _buyAmount: (number | BN | string)[],
      _sellAmount: (number | BN | string)[],
      _prevBuyOrders: (string | BN)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      auctionId: number | BN | string,
      _buyAmount: (number | BN | string)[],
      _sellAmount: (number | BN | string)[],
      _prevBuyOrders: (string | BN)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      auctionId: number | BN | string,
      _buyAmount: (number | BN | string)[],
      _sellAmount: (number | BN | string)[],
      _prevBuyOrders: (string | BN)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  calculatePrice: {
    (
      auctionId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      auctionId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<[BN, BN]>;
    sendTransaction(
      auctionId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      auctionId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  claimFromBuyOrder: {
    (
      auctionId: number | BN | string,
      orders: (string | BN)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      auctionId: number | BN | string,
      orders: (string | BN)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<[BN, BN]>;
    sendTransaction(
      auctionId: number | BN | string,
      orders: (string | BN)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      auctionId: number | BN | string,
      orders: (string | BN)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  claimFromSellOrder: {
    (
      auctionId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      auctionId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<[BN, BN]>;
    sendTransaction(
      auctionId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      auctionId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  registerUser: {
    (user: string | BN, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(
      user: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;
    sendTransaction(
      user: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      user: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  getUserId: {
    (user: string | BN, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(
      user: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;
    sendTransaction(
      user: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      user: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  getSecondsRemainingInBatch(
    auctionId: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;
}

export interface IterableOrderedOrderSetWrapperInstance
  extends Truffle.ContractInstance {
  data(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  insert: {
    (value: string | BN, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(
      value: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      value: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      value: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  insertAt: {
    (
      value: string | BN,
      at: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      value: string | BN,
      at: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      value: string | BN,
      at: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      value: string | BN,
      at: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  remove: {
    (value: string | BN, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(
      value: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      value: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      value: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  removeAt: {
    (
      value: string | BN,
      at: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      value: string | BN,
      at: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      value: string | BN,
      at: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      value: string | BN,
      at: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  contains(
    value: string | BN,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  isEmpty(txDetails?: Truffle.TransactionDetails): Promise<boolean>;

  size(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  first(txDetails?: Truffle.TransactionDetails): Promise<string>;

  next(
    value: string | BN,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  decodeOrder(
    value: string | BN,
    txDetails?: Truffle.TransactionDetails
  ): Promise<[BN, BN, BN]>;

  encodeOrder(
    userId: number | BN | string,
    sellAmount: number | BN | string,
    buyAmount: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  biggerThan(
    orderLeft: string | BN,
    orderRight: string | BN,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;
}
