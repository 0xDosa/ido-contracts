/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import BN from "bn.js";
import { Contract, ContractOptions } from "web3-eth-contract";
import { EventLog } from "web3-core";
import { EventEmitter } from "events";
import { ContractEvent, Callback, TransactionObject, BlockType } from "./types";

interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export class IterableOrderedOrderSetWrapper extends Contract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions
  );
  clone(): IterableOrderedOrderSetWrapper;
  methods: {
    data(): TransactionObject<string>;

    insert(value: string | number[]): TransactionObject<boolean>;

    insertAt(
      value: string | number[],
      at: string | number[]
    ): TransactionObject<boolean>;

    remove(value: string | number[]): TransactionObject<boolean>;

    removeAt(
      value: string | number[],
      at: string | number[]
    ): TransactionObject<boolean>;

    contains(value: string | number[]): TransactionObject<boolean>;

    isEmpty(): TransactionObject<boolean>;

    size(): TransactionObject<string>;

    first(): TransactionObject<string>;

    next(value: string | number[]): TransactionObject<string>;

    decodeOrder(
      value: string | number[]
    ): TransactionObject<{
      0: string;
      1: string;
      2: string;
    }>;

    encodeOrder(
      userId: number | string,
      sellAmount: number | string,
      buyAmount: number | string
    ): TransactionObject<string>;

    biggerThan(
      orderLeft: string | number[],
      orderRight: string | number[]
    ): TransactionObject<boolean>;
  };
  events: {
    allEvents: (
      options?: EventOptions,
      cb?: Callback<EventLog>
    ) => EventEmitter;
  };
}
