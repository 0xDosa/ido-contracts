{
  "address": "0xaA73BD4Ab068D735AdAeB04599Aac79647b21D49",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "auctionId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint96",
          "name": "priceNumerator",
          "type": "uint96"
        },
        {
          "indexed": false,
          "internalType": "uint96",
          "name": "priceDenominator",
          "type": "uint96"
        }
      ],
      "name": "AuctionCleared",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "auctionId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint64",
          "name": "userId",
          "type": "uint64"
        },
        {
          "indexed": false,
          "internalType": "uint96",
          "name": "sellAmount",
          "type": "uint96"
        },
        {
          "indexed": false,
          "internalType": "uint96",
          "name": "buyAmount",
          "type": "uint96"
        }
      ],
      "name": "CancellationSellOrder",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "auctionId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint64",
          "name": "userId",
          "type": "uint64"
        },
        {
          "indexed": false,
          "internalType": "uint96",
          "name": "buyAmount",
          "type": "uint96"
        },
        {
          "indexed": false,
          "internalType": "uint96",
          "name": "sellAmount",
          "type": "uint96"
        }
      ],
      "name": "ClaimedFromOrder",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "auctionId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "contract IERC20",
          "name": "_sellToken",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "contract IERC20",
          "name": "_buyToken",
          "type": "address"
        }
      ],
      "name": "NewAuction",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "auctionId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint64",
          "name": "userId",
          "type": "uint64"
        },
        {
          "indexed": false,
          "internalType": "uint96",
          "name": "buyAmount",
          "type": "uint96"
        },
        {
          "indexed": false,
          "internalType": "uint96",
          "name": "sellAmount",
          "type": "uint96"
        }
      ],
      "name": "NewSellOrder",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "userId",
          "type": "uint64"
        }
      ],
      "name": "UserRegistration",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "FEE_DENOMINATOR",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "auctionCounter",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "auctionData",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "sellToken",
          "type": "address"
        },
        {
          "internalType": "contract IERC20",
          "name": "buyToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "auctionEndDate",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "initialAuctionOrder",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "minimumParticipationBuyAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "interimSellAmountSum",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "interimOrder",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "clearingPriceOrder",
          "type": "bytes32"
        },
        {
          "internalType": "uint96",
          "name": "volumeClearingPriceOrder",
          "type": "uint96"
        },
        {
          "internalType": "uint256",
          "name": "feeNumerator",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "auctionId",
          "type": "uint256"
        },
        {
          "internalType": "bytes32[]",
          "name": "_sellOrders",
          "type": "bytes32[]"
        },
        {
          "internalType": "bytes32[]",
          "name": "_prevSellOrders",
          "type": "bytes32[]"
        }
      ],
      "name": "cancelSellOrders",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "auctionId",
          "type": "uint256"
        },
        {
          "internalType": "bytes32[]",
          "name": "orders",
          "type": "bytes32[]"
        },
        {
          "internalType": "bytes32[]",
          "name": "previousOrders",
          "type": "bytes32[]"
        }
      ],
      "name": "claimFromParticipantOrder",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "sumSellTokenAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "sumBuyTokenAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "auctionId",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "order",
          "type": "bytes32"
        }
      ],
      "name": "containsOrder",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feeNumerator",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feeReceiverUserId",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "auctionId",
          "type": "uint256"
        }
      ],
      "name": "getSecondsRemainingInBatch",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "getUserId",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "userId",
          "type": "uint64"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "_sellToken",
          "type": "address"
        },
        {
          "internalType": "contract IERC20",
          "name": "_buyToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "duration",
          "type": "uint256"
        },
        {
          "internalType": "uint96",
          "name": "_sellAmount",
          "type": "uint96"
        },
        {
          "internalType": "uint96",
          "name": "_minBuyAmount",
          "type": "uint96"
        },
        {
          "internalType": "uint256",
          "name": "minimumParticipationBuyAmount",
          "type": "uint256"
        }
      ],
      "name": "initiateAuction",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "numUsers",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "auctionId",
          "type": "uint256"
        },
        {
          "internalType": "uint96[]",
          "name": "_minBuyAmounts",
          "type": "uint96[]"
        },
        {
          "internalType": "uint96[]",
          "name": "_sellAmounts",
          "type": "uint96[]"
        },
        {
          "internalType": "bytes32[]",
          "name": "_prevSellOrders",
          "type": "bytes32[]"
        }
      ],
      "name": "placeSellOrders",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "userId",
          "type": "uint64"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "auctionId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "iterationSteps",
          "type": "uint256"
        }
      ],
      "name": "precalculateSellAmountSum",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "registerUser",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "userId",
          "type": "uint64"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "sellOrders",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "size",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newFeeNumerator",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "newfeeReceiverAddress",
          "type": "address"
        }
      ],
      "name": "setFeeParameters",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "auctionId",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "price",
          "type": "bytes32"
        }
      ],
      "name": "verifyPrice",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x8b0d34a6c3481d13f886252e8a3ad6e5a22921b3bd2aa56aa99931345ee0eb73",
  "receipt": {
    "to": null,
    "from": "0xfB696e9E9e5038DDc78592082689B149AB3a19d5",
    "contractAddress": "0xaA73BD4Ab068D735AdAeB04599Aac79647b21D49",
    "transactionIndex": 4,
    "gasUsed": "4251644",
    "logsBloom": "0x
    "blockHash": "0x085c080dd08cc2124c7b098178cf68187d41a4fa0bfff76c48cfa2a1fe8e8f15",
    "transactionHash": "0x8b0d34a6c3481d13f886252e8a3ad6e5a22921b3bd2aa56aa99931345ee0eb73",
    "logs": [
      {
        "transactionIndex": 4,
        "blockNumber": 7759974,
        "transactionHash": "0x8b0d34a6c3481d13f886252e8a3ad6e5a22921b3bd2aa56aa99931345ee0eb73",
        "address": "0xaA73BD4Ab068D735AdAeB04599Aac79647b21D49",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000fb696e9e9e5038ddc78592082689b149ab3a19d5"
        ],
        "data": "0x",
        "logIndex": 6,
        "blockHash": "0x085c080dd08cc2124c7b098178cf68187d41a4fa0bfff76c48cfa2a1fe8e8f15"
      }
    ],
    "blockNumber": 7759974,
    "cumulativeGasUsed": "4487803",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "0d6be83a50b43d886dbf033bcbac13a7",
  "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"auctionId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint96\",\"name\":\"priceNumerator\",\"type\":\"uint96\"},{\"indexed\":false,\"internalType\":\"uint96\",\"name\":\"priceDenominator\",\"type\":\"uint96\"}],\"name\":\"AuctionCleared\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"auctionId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"userId\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"uint96\",\"name\":\"sellAmount\",\"type\":\"uint96\"},{\"indexed\":false,\"internalType\":\"uint96\",\"name\":\"buyAmount\",\"type\":\"uint96\"}],\"name\":\"CancellationSellOrder\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"auctionId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"userId\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"uint96\",\"name\":\"buyAmount\",\"type\":\"uint96\"},{\"indexed\":false,\"internalType\":\"uint96\",\"name\":\"sellAmount\",\"type\":\"uint96\"}],\"name\":\"ClaimedFromOrder\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"auctionId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"contract IERC20\",\"name\":\"_sellToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"contract IERC20\",\"name\":\"_buyToken\",\"type\":\"address\"}],\"name\":\"NewAuction\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"auctionId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"userId\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"uint96\",\"name\":\"buyAmount\",\"type\":\"uint96\"},{\"indexed\":false,\"internalType\":\"uint96\",\"name\":\"sellAmount\",\"type\":\"uint96\"}],\"name\":\"NewSellOrder\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"userId\",\"type\":\"uint64\"}],\"name\":\"UserRegistration\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"FEE_DENOMINATOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"auctionCounter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"auctionData\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"sellToken\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"buyToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"auctionEndDate\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"initialAuctionOrder\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"minimumParticipationBuyAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"interimSellAmountSum\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"interimOrder\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"clearingPriceOrder\",\"type\":\"bytes32\"},{\"internalType\":\"uint96\",\"name\":\"volumeClearingPriceOrder\",\"type\":\"uint96\"},{\"internalType\":\"uint256\",\"name\":\"feeNumerator\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"auctionId\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"_sellOrders\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"_prevSellOrders\",\"type\":\"bytes32[]\"}],\"name\":\"cancelSellOrders\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"auctionId\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"orders\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"previousOrders\",\"type\":\"bytes32[]\"}],\"name\":\"claimFromParticipantOrder\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"sumSellTokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sumBuyTokenAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"auctionId\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"order\",\"type\":\"bytes32\"}],\"name\":\"containsOrder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeNumerator\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeReceiverUserId\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"auctionId\",\"type\":\"uint256\"}],\"name\":\"getSecondsRemainingInBatch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getUserId\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"userId\",\"type\":\"uint64\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_sellToken\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"_buyToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"uint96\",\"name\":\"_sellAmount\",\"type\":\"uint96\"},{\"internalType\":\"uint96\",\"name\":\"_minBuyAmount\",\"type\":\"uint96\"},{\"internalType\":\"uint256\",\"name\":\"minimumParticipationBuyAmount\",\"type\":\"uint256\"}],\"name\":\"initiateAuction\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numUsers\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"auctionId\",\"type\":\"uint256\"},{\"internalType\":\"uint96[]\",\"name\":\"_minBuyAmounts\",\"type\":\"uint96[]\"},{\"internalType\":\"uint96[]\",\"name\":\"_sellAmounts\",\"type\":\"uint96[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"_prevSellOrders\",\"type\":\"bytes32[]\"}],\"name\":\"placeSellOrders\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"userId\",\"type\":\"uint64\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"auctionId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"iterationSteps\",\"type\":\"uint256\"}],\"name\":\"precalculateSellAmountSum\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"registerUser\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"userId\",\"type\":\"uint64\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"sellOrders\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"size\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newFeeNumerator\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"newfeeReceiverAddress\",\"type\":\"address\"}],\"name\":\"setFeeParameters\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"auctionId\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"price\",\"type\":\"bytes32\"}],\"name\":\"verifyPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/EasyAuction.sol\":\"EasyAuction\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/GSN/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x8d3cb350f04ff49cfb10aef08d87f19dcbaecc8027b0bed12f3275cd12f38cf0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../GSN/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(_owner == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\",\"keccak256\":\"0xf7c39c7e6d06ed3bda90cfefbcbf2ddc32c599c3d6721746546ad64946efccaa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow, so we distribute\\n        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\\n    }\\n}\\n\",\"keccak256\":\"0x363bd3b45201f07c9b71c2edc96533468cf14a3d029fabd82fddceb1eb3ebd9c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0x3b21f2c8d626de3b9925ae33e972d8bf5c8b1bffb3f4ee94daeed7d0679036e6\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x5f02220344881ce43204ae4a6281145a67bc52c2bb1290a791857df3d19d78f5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf12dfbe97e6276980b83d2830bb0eb75e0cf4f3e626c2471137f82158ae6a0fc\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa6a15ddddcbf29d2922a1e0d4151b5d2d33da24b93cc9ebc12390e0d855532f8\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/SafeCast.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n\\n/**\\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\\n * checks.\\n *\\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\\n * easily result in undesired exploitation or bugs, since developers usually\\n * assume that overflows raise errors. `SafeCast` restores this intuition by\\n * reverting the transaction when such an operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n *\\n * Can be combined with {SafeMath} and {SignedSafeMath} to extend it to smaller types, by performing\\n * all math on `uint256` and `int256` and then downcasting.\\n */\\nlibrary SafeCast {\\n\\n    /**\\n     * @dev Returns the downcasted uint128 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint128).\\n     *\\n     * Counterpart to Solidity's `uint128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     */\\n    function toUint128(uint256 value) internal pure returns (uint128) {\\n        require(value < 2**128, \\\"SafeCast: value doesn\\\\'t fit in 128 bits\\\");\\n        return uint128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint64 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint64).\\n     *\\n     * Counterpart to Solidity's `uint64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     */\\n    function toUint64(uint256 value) internal pure returns (uint64) {\\n        require(value < 2**64, \\\"SafeCast: value doesn\\\\'t fit in 64 bits\\\");\\n        return uint64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint32 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint32).\\n     *\\n     * Counterpart to Solidity's `uint32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     */\\n    function toUint32(uint256 value) internal pure returns (uint32) {\\n        require(value < 2**32, \\\"SafeCast: value doesn\\\\'t fit in 32 bits\\\");\\n        return uint32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint16 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint16).\\n     *\\n     * Counterpart to Solidity's `uint16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     */\\n    function toUint16(uint256 value) internal pure returns (uint16) {\\n        require(value < 2**16, \\\"SafeCast: value doesn\\\\'t fit in 16 bits\\\");\\n        return uint16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint8 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint8).\\n     *\\n     * Counterpart to Solidity's `uint8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits.\\n     */\\n    function toUint8(uint256 value) internal pure returns (uint8) {\\n        require(value < 2**8, \\\"SafeCast: value doesn\\\\'t fit in 8 bits\\\");\\n        return uint8(value);\\n    }\\n\\n    /**\\n     * @dev Converts a signed int256 into an unsigned uint256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be greater than or equal to 0.\\n     */\\n    function toUint256(int256 value) internal pure returns (uint256) {\\n        require(value >= 0, \\\"SafeCast: value must be positive\\\");\\n        return uint256(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int128 from int256, reverting on\\n     * overflow (when the input is less than smallest int128 or\\n     * greater than largest int128).\\n     *\\n     * Counterpart to Solidity's `int128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt128(int256 value) internal pure returns (int128) {\\n        require(value >= -2**127 && value < 2**127, \\\"SafeCast: value doesn\\\\'t fit in 128 bits\\\");\\n        return int128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int64 from int256, reverting on\\n     * overflow (when the input is less than smallest int64 or\\n     * greater than largest int64).\\n     *\\n     * Counterpart to Solidity's `int64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt64(int256 value) internal pure returns (int64) {\\n        require(value >= -2**63 && value < 2**63, \\\"SafeCast: value doesn\\\\'t fit in 64 bits\\\");\\n        return int64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int32 from int256, reverting on\\n     * overflow (when the input is less than smallest int32 or\\n     * greater than largest int32).\\n     *\\n     * Counterpart to Solidity's `int32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt32(int256 value) internal pure returns (int32) {\\n        require(value >= -2**31 && value < 2**31, \\\"SafeCast: value doesn\\\\'t fit in 32 bits\\\");\\n        return int32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int16 from int256, reverting on\\n     * overflow (when the input is less than smallest int16 or\\n     * greater than largest int16).\\n     *\\n     * Counterpart to Solidity's `int16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt16(int256 value) internal pure returns (int16) {\\n        require(value >= -2**15 && value < 2**15, \\\"SafeCast: value doesn\\\\'t fit in 16 bits\\\");\\n        return int16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int8 from int256, reverting on\\n     * overflow (when the input is less than smallest int8 or\\n     * greater than largest int8).\\n     *\\n     * Counterpart to Solidity's `int8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt8(int256 value) internal pure returns (int8) {\\n        require(value >= -2**7 && value < 2**7, \\\"SafeCast: value doesn\\\\'t fit in 8 bits\\\");\\n        return int8(value);\\n    }\\n\\n    /**\\n     * @dev Converts an unsigned uint256 into a signed int256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be less than or equal to maxInt256.\\n     */\\n    function toInt256(uint256 value) internal pure returns (int256) {\\n        require(value < 2**255, \\\"SafeCast: value doesn't fit in an int256\\\");\\n        return int256(value);\\n    }\\n}\\n\",\"keccak256\":\"0x7b2b8baa20fd60ab4a328c8e34c64a353651b80ba4b5b157cbb61813f6f85d55\",\"license\":\"MIT\"},\"contracts/EasyAuction.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-or-newer\\npragma solidity >=0.6.8;\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\nimport \\\"./libraries/IterableOrderedOrderSet.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/Math.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"./libraries/IdToAddressBiMap.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/SafeCast.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ncontract EasyAuction is Ownable {\\n    using SafeERC20 for IERC20;\\n    using SafeMath for uint64;\\n    using SafeMath for uint96;\\n    using SafeMath for uint256;\\n    using SafeCast for uint256;\\n    using IterableOrderedOrderSet for IterableOrderedOrderSet.Data;\\n    using IterableOrderedOrderSet for bytes32;\\n    using IdToAddressBiMap for IdToAddressBiMap.Data;\\n\\n    modifier atStageOrderPlacement(uint256 auctionId) {\\n        require(\\n            block.timestamp < auctionData[auctionId].auctionEndDate,\\n            \\\"no longer in order placement phase\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier atStageSolutionSubmission(uint256 auctionId) {\\n        require(\\n            block.timestamp > auctionData[auctionId].auctionEndDate &&\\n                auctionData[auctionId].clearingPriceOrder == bytes32(0),\\n            \\\"Auction not in solution submission phase\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier atStageFinished(uint256 auctionId) {\\n        require(\\n            auctionData[auctionId].clearingPriceOrder != bytes32(0),\\n            \\\"Auction not yet finished\\\"\\n        );\\n        _;\\n    }\\n\\n    event NewSellOrder(\\n        uint256 indexed auctionId,\\n        uint64 indexed userId,\\n        uint96 buyAmount,\\n        uint96 sellAmount\\n    );\\n    event CancellationSellOrder(\\n        uint256 indexed auctionId,\\n        uint64 indexed userId,\\n        uint96 sellAmount,\\n        uint96 buyAmount\\n    );\\n    event ClaimedFromOrder(\\n        uint256 indexed auctionId,\\n        uint64 indexed userId,\\n        uint96 buyAmount,\\n        uint96 sellAmount\\n    );\\n    event NewAuction(\\n        uint256 indexed auctionId,\\n        IERC20 indexed _sellToken,\\n        IERC20 indexed _buyToken\\n    );\\n    event AuctionCleared(\\n        uint256 indexed auctionId,\\n        uint96 priceNumerator,\\n        uint96 priceDenominator\\n    );\\n    event UserRegistration(address indexed user, uint64 userId);\\n\\n    struct AuctionData {\\n        IERC20 sellToken;\\n        IERC20 buyToken;\\n        uint256 auctionEndDate;\\n        bytes32 initialAuctionOrder;\\n        uint256 minimumParticipationBuyAmount;\\n        uint256 interimSellAmountSum;\\n        bytes32 interimOrder;\\n        bytes32 clearingPriceOrder;\\n        uint96 volumeClearingPriceOrder;\\n        uint256 feeNumerator;\\n    }\\n    mapping(uint256 => IterableOrderedOrderSet.Data) public sellOrders;\\n    mapping(uint256 => AuctionData) public auctionData;\\n    IdToAddressBiMap.Data private registeredUsers;\\n    uint64 public numUsers;\\n    uint256 public auctionCounter;\\n\\n    constructor() public Ownable() {}\\n\\n    uint256 public feeNumerator = 0;\\n    uint256 public constant FEE_DENOMINATOR = 1000;\\n    uint64 public feeReceiverUserId = 0;\\n\\n    function setFeeParameters(\\n        uint256 newFeeNumerator,\\n        address newfeeReceiverAddress\\n    ) public onlyOwner() {\\n        require(\\n            newFeeNumerator <= 15,\\n            \\\"Fee is not allowed to be set higher than 1.5%\\\"\\n        );\\n        // caution: for currently running auctions, the feeReceiverUserId is changing as well.\\n        feeReceiverUserId = getUserId(newfeeReceiverAddress);\\n        feeNumerator = newFeeNumerator;\\n    }\\n\\n    function initiateAuction(\\n        IERC20 _sellToken,\\n        IERC20 _buyToken,\\n        uint256 duration,\\n        uint96 _sellAmount,\\n        uint96 _minBuyAmount,\\n        uint256 minimumParticipationBuyAmount\\n    ) public returns (uint256) {\\n        uint64 userId = getUserId(msg.sender);\\n\\n        // withdraws sellAmount + fees\\n        _sellToken.safeTransferFrom(\\n            msg.sender,\\n            address(this),\\n            _sellAmount.mul(FEE_DENOMINATOR.add(feeNumerator)).div(\\n                FEE_DENOMINATOR\\n            )\\n        );\\n        require(\\n            minimumParticipationBuyAmount > 0,\\n            \\\"minimumParticipationBuyAmount is not allowed to be zero\\\"\\n        );\\n        auctionCounter++;\\n        auctionData[auctionCounter] = AuctionData(\\n            _sellToken,\\n            _buyToken,\\n            block.timestamp + duration,\\n            IterableOrderedOrderSet.encodeOrder(\\n                userId,\\n                _minBuyAmount,\\n                _sellAmount\\n            ),\\n            minimumParticipationBuyAmount,\\n            0,\\n            bytes32(0),\\n            bytes32(0),\\n            0,\\n            feeNumerator\\n        );\\n        emit NewAuction(auctionCounter, _sellToken, _buyToken);\\n        return auctionCounter;\\n    }\\n\\n    function placeSellOrders(\\n        uint256 auctionId,\\n        uint96[] memory _minBuyAmounts,\\n        uint96[] memory _sellAmounts,\\n        bytes32[] memory _prevSellOrders\\n    ) public atStageOrderPlacement(auctionId) returns (uint64 userId) {\\n        (\\n            ,\\n            uint96 buyAmountOfInitialAuctionOrder,\\n            uint96 sellAmountOfInitialAuctionOrder\\n        ) = auctionData[auctionId].initialAuctionOrder.decodeOrder();\\n        uint256 sumOfSellAmounts = 0;\\n        userId = getUserId(msg.sender);\\n        for (uint256 i = 0; i < _minBuyAmounts.length; i++) {\\n            require(\\n                _minBuyAmounts[i].mul(buyAmountOfInitialAuctionOrder) <\\n                    sellAmountOfInitialAuctionOrder.mul(_sellAmounts[i]),\\n                \\\"limit price not better than mimimal offer\\\"\\n            );\\n            // orders size should have a minimum size, in order\\n            // to limit price calculation gas consumption\\n            require(\\n                _minBuyAmounts[i] >\\n                    auctionData[auctionId].minimumParticipationBuyAmount,\\n                \\\"order too small\\\"\\n            );\\n            bool success =\\n                sellOrders[auctionId].insert(\\n                    IterableOrderedOrderSet.encodeOrder(\\n                        userId,\\n                        _minBuyAmounts[i],\\n                        _sellAmounts[i]\\n                    ),\\n                    _prevSellOrders[i]\\n                );\\n            if (success) {\\n                sumOfSellAmounts = sumOfSellAmounts.add(_sellAmounts[i]);\\n                emit NewSellOrder(\\n                    auctionId,\\n                    userId,\\n                    _minBuyAmounts[i],\\n                    _sellAmounts[i]\\n                );\\n            }\\n        }\\n        auctionData[auctionId].buyToken.safeTransferFrom(\\n            msg.sender,\\n            address(this),\\n            sumOfSellAmounts\\n        );\\n    }\\n\\n    function cancelSellOrders(\\n        uint256 auctionId,\\n        bytes32[] memory _sellOrders,\\n        bytes32[] memory _prevSellOrders\\n    ) public atStageOrderPlacement(auctionId) {\\n        uint64 userId = getUserId(msg.sender);\\n        uint256 claimableAmount = 0;\\n        for (uint256 i = 0; i < _sellOrders.length; i++) {\\n            (\\n                uint64 userIdOfIter,\\n                uint96 buyAmountOfIter,\\n                uint96 sellAmountOfIter\\n            ) = _sellOrders[i].decodeOrder();\\n            require(\\n                userIdOfIter == userId,\\n                \\\"Only the user can cancel his orders\\\"\\n            );\\n            if (\\n                sellOrders[auctionId].remove(_sellOrders[i], _prevSellOrders[i])\\n            ) {\\n                claimableAmount = claimableAmount.add(sellAmountOfIter);\\n                emit CancellationSellOrder(\\n                    auctionId,\\n                    userId,\\n                    buyAmountOfIter,\\n                    sellAmountOfIter\\n                );\\n            }\\n        }\\n        auctionData[auctionId].buyToken.safeTransfer(\\n            msg.sender,\\n            claimableAmount\\n        );\\n    }\\n\\n    function precalculateSellAmountSum(\\n        uint256 auctionId,\\n        uint256 iterationSteps\\n    ) public atStageSolutionSubmission(auctionId) {\\n        (, , uint96 sellAmount) =\\n            auctionData[auctionId].initialAuctionOrder.decodeOrder();\\n        uint256 sumSellAmount = auctionData[auctionId].interimSellAmountSum;\\n        bytes32 iterOrder = auctionData[auctionId].interimOrder;\\n        if (iterOrder == bytes32(0)) {\\n            iterOrder = IterableOrderedOrderSet.QUEUE_START;\\n        }\\n\\n        for (uint256 i = 0; i < iterationSteps; i++) {\\n            iterOrder = sellOrders[auctionId].next(iterOrder);\\n            (, , uint96 sellAmountOfIter) = iterOrder.decodeOrder();\\n            sumSellAmount = sumSellAmount.add(sellAmountOfIter);\\n        }\\n\\n        // it is checked that not too many iteration steps were taken:\\n        // require that the sum of SellAmounts times the price of the last order\\n        // is not more than intially sold amount\\n        (, uint96 buyAmountOfIter, uint96 sellAmountOfIter) =\\n            iterOrder.decodeOrder();\\n        require(\\n            sumSellAmount.mul(buyAmountOfIter) <\\n                sellAmount.mul(sellAmountOfIter),\\n            \\\"too many orders summed up\\\"\\n        );\\n\\n        auctionData[auctionId].interimSellAmountSum = sumSellAmount;\\n        auctionData[auctionId].interimOrder = iterOrder;\\n    }\\n\\n    // @dev function verifiying the auction price\\n    // @parameter price: This should either be a price encoded as an order\\n    // with userId = 0, priceNumerator = buyAmount, priceDenominator = sellAmount\\n    // or it should reference to the particular order settled only partially within\\n    // this auction.\\n    function verifyPrice(uint256 auctionId, bytes32 price)\\n        public\\n        atStageSolutionSubmission(auctionId)\\n    {\\n        (, uint96 priceNumerator, uint96 priceDenominator) =\\n            price.decodeOrder();\\n        (uint64 auctioneerId, uint96 buyAmount, uint96 sellAmount) =\\n            auctionData[auctionId].initialAuctionOrder.decodeOrder();\\n        require(priceNumerator > 0, \\\"price must be postive\\\");\\n        uint256 sumSellAmount = auctionData[auctionId].interimSellAmountSum;\\n        bytes32 iterOrder = auctionData[auctionId].interimOrder;\\n        if (iterOrder == bytes32(0)) {\\n            iterOrder = IterableOrderedOrderSet.QUEUE_START;\\n        }\\n        if (sellOrders[auctionId].size > 0) {\\n            iterOrder = sellOrders[auctionId].next(iterOrder);\\n            while (iterOrder != price && iterOrder.smallerThan(price)) {\\n                (, , uint96 sellAmountOfIter) = iterOrder.decodeOrder();\\n                sumSellAmount = sumSellAmount.add(sellAmountOfIter);\\n                iterOrder = sellOrders[auctionId].next(iterOrder);\\n            }\\n        }\\n        uint256 sumBuyAmount =\\n            sumSellAmount.mul(priceNumerator).div(priceDenominator);\\n        if (price == iterOrder) {\\n            // case 1: one sellOrder is partically filled\\n            // The partially filled order is the iterOrder, if:\\n            // 1) The sumBuyAmounts is not bigger than the intitial order's sell amount\\n            // i.e, sellAmount >= sumBuyAmount\\n            // 2) The volume of the particial order is not bigger than its sell volume\\n            // i.e. auctionData[auctionId].volumeClearingPriceOrder <= sellAmountOfIter,\\n            (, , uint96 sellAmountOfIter) = iterOrder.decodeOrder();\\n            uint256 clearingOrderBuyAmount = sellAmount.sub(sumBuyAmount);\\n            // Attention: This conversion can prevent closing auctions, if rounding down\\n            // to uint96 does fail. Should not happen, unless token has more than 18 digits\\n            // or prices are huge.\\n            auctionData[auctionId].volumeClearingPriceOrder = (\\n                clearingOrderBuyAmount.mul(priceDenominator).div(priceNumerator)\\n            )\\n                .toUint64();\\n            require(\\n                auctionData[auctionId].volumeClearingPriceOrder <=\\n                    sellAmountOfIter,\\n                \\\"order can not be clearing order\\\"\\n            );\\n            auctionData[auctionId].clearingPriceOrder = iterOrder;\\n        } else {\\n            if (sumBuyAmount < sellAmount) {\\n                // case 2: initialAuction order is partically filled\\n                // We require that the price was the initialOrderLimit price's inverse\\n                // as this ensures that the for-loop iterated through all orders\\n                // and all orders are considered\\n                require(\\n                    priceNumerator.mul(buyAmount) ==\\n                        sellAmount.mul(priceDenominator),\\n                    \\\"supplied price must be inverse initialOrderLimit\\\"\\n                );\\n                auctionData[auctionId].volumeClearingPriceOrder = sumBuyAmount\\n                    .toUint64();\\n                auctionData[auctionId]\\n                    .clearingPriceOrder = IterableOrderedOrderSet.encodeOrder(\\n                    auctioneerId,\\n                    priceNumerator,\\n                    priceDenominator\\n                );\\n            } else {\\n                // case 3: no order is partically filled\\n                // In this case the sumBuyAmount must be equal to\\n                // the sellAmount of the initialAuctionOrder, without\\n                // any rounding errors.\\n                // This price is always existing as we can choose\\n                // priceNumerator = sellAmount and priceDenominator = sumSellAmount\\n                auctionData[auctionId].clearingPriceOrder = price;\\n                require(\\n                    sumBuyAmount == sellAmount,\\n                    \\\"price is not clearing price\\\"\\n                );\\n                require(\\n                    priceNumerator.mul(buyAmount) <=\\n                        sellAmount.mul(priceDenominator),\\n                    \\\"clearing price is better than initialAuctionOrder\\\"\\n                );\\n            }\\n        }\\n\\n        emit AuctionCleared(auctionId, priceNumerator, priceDenominator);\\n        if (auctionData[auctionId].feeNumerator > 0) {\\n            claimFees(auctionId);\\n        }\\n        claimAuctioneerFunds(auctionId);\\n    }\\n\\n    function claimFromParticipantOrder(\\n        uint256 auctionId,\\n        bytes32[] memory orders,\\n        bytes32[] memory previousOrders\\n    )\\n        public\\n        atStageFinished(auctionId)\\n        returns (uint256 sumSellTokenAmount, uint256 sumBuyTokenAmount)\\n    {\\n        AuctionData memory auction = auctionData[auctionId];\\n        (, uint96 priceNumerator, uint96 priceDenominator) =\\n            auction.clearingPriceOrder.decodeOrder();\\n        (uint64 userId, , ) = orders[0].decodeOrder();\\n        for (uint256 i = 0; i < orders.length; i++) {\\n            require(\\n                sellOrders[auctionId].remove(orders[i], previousOrders[i]),\\n                \\\"order is no longer claimable\\\"\\n            );\\n            (uint64 userIdOrder, uint96 buyAmount, uint96 sellAmount) =\\n                orders[i].decodeOrder();\\n            require(\\n                userIdOrder == userId,\\n                \\\"only allowed to claim for same user\\\"\\n            );\\n            if (orders[i] == auction.clearingPriceOrder) {\\n                sumSellTokenAmount = sumSellTokenAmount.add(\\n                    auction.volumeClearingPriceOrder.mul(priceNumerator).div(\\n                        priceDenominator\\n                    )\\n                );\\n                sumBuyTokenAmount = sumBuyTokenAmount.add(\\n                    sellAmount.sub(auction.volumeClearingPriceOrder)\\n                );\\n            } else {\\n                if (orders[i].smallerThan(auction.clearingPriceOrder)) {\\n                    sumSellTokenAmount = sumSellTokenAmount.add(\\n                        sellAmount.mul(priceNumerator).div(priceDenominator)\\n                    );\\n                } else {\\n                    sumBuyTokenAmount = sumBuyTokenAmount.add(sellAmount);\\n                }\\n            }\\n            emit ClaimedFromOrder(auctionId, userId, buyAmount, sellAmount);\\n        }\\n        sendOutTokens(auctionId, sumSellTokenAmount, sumBuyTokenAmount, userId);\\n    }\\n\\n    function claimAuctioneerFunds(uint256 auctionId)\\n        internal\\n        returns (uint256 sellTokenAmount, uint256 buyTokenAmount)\\n    {\\n        (uint64 auctioneerId, uint96 buyAmount, uint96 sellAmount) =\\n            auctionData[auctionId].initialAuctionOrder.decodeOrder();\\n        auctionData[auctionId].initialAuctionOrder = bytes32(0);\\n        (, uint96 priceNumerator, uint96 priceDenominator) =\\n            auctionData[auctionId].clearingPriceOrder.decodeOrder();\\n        if (priceNumerator.mul(buyAmount) == priceDenominator.mul(sellAmount)) {\\n            // In this case we have a partial match of the initialSellOrder\\n            sellTokenAmount = sellAmount.sub(\\n                auctionData[auctionId].volumeClearingPriceOrder\\n            );\\n            buyTokenAmount = auctionData[auctionId]\\n                .volumeClearingPriceOrder\\n                .mul(priceDenominator)\\n                .div(priceNumerator);\\n        } else {\\n            buyTokenAmount = sellAmount.mul(priceDenominator).div(\\n                priceNumerator\\n            );\\n        }\\n        sendOutTokens(auctionId, sellTokenAmount, buyTokenAmount, auctioneerId);\\n    }\\n\\n    function claimFees(uint256 auctionId) internal {\\n        (uint64 auctioneerId, uint96 buyAmount, uint96 sellAmount) =\\n            auctionData[auctionId].initialAuctionOrder.decodeOrder();\\n        (, uint96 priceNumerator, uint96 priceDenominator) =\\n            auctionData[auctionId].clearingPriceOrder.decodeOrder();\\n        uint256 feeAmount =\\n            sellAmount.mul(auctionData[auctionId].feeNumerator).div(\\n                FEE_DENOMINATOR\\n            );\\n        if (priceNumerator.mul(buyAmount) == priceDenominator.mul(sellAmount)) {\\n            // In this case we have a partial match of the initialSellOrder\\n            uint256 sellTokenAmount =\\n                sellAmount.sub(auctionData[auctionId].volumeClearingPriceOrder);\\n            sendOutTokens(\\n                auctionId,\\n                feeAmount.mul(sellTokenAmount).div(sellAmount),\\n                0,\\n                feeReceiverUserId\\n            );\\n            sendOutTokens(\\n                auctionId,\\n                feeAmount.mul(sellAmount.sub(sellTokenAmount)).div(sellAmount),\\n                0,\\n                auctioneerId\\n            );\\n        } else {\\n            sendOutTokens(auctionId, feeAmount, 0, feeReceiverUserId);\\n        }\\n    }\\n\\n    function sendOutTokens(\\n        uint256 auctionId,\\n        uint256 sellTokenAmount,\\n        uint256 buyTokenAmount,\\n        uint64 userId\\n    ) internal {\\n        address userAddress = registeredUsers.getAddressAt(userId);\\n        if (sellTokenAmount > 0) {\\n            auctionData[auctionId].sellToken.safeTransfer(\\n                userAddress,\\n                sellTokenAmount\\n            );\\n        }\\n        if (buyTokenAmount > 0) {\\n            auctionData[auctionId].buyToken.safeTransfer(\\n                userAddress,\\n                buyTokenAmount\\n            );\\n        }\\n    }\\n\\n    function registerUser(address user) public returns (uint64 userId) {\\n        require(\\n            registeredUsers.insert(numUsers, user),\\n            \\\"User already registered\\\"\\n        );\\n        userId = numUsers;\\n        numUsers = numUsers.add(1).toUint64();\\n        emit UserRegistration(user, userId);\\n    }\\n\\n    function getUserId(address user) public returns (uint64 userId) {\\n        if (registeredUsers.hasAddress(user)) {\\n            return registeredUsers.getId(user);\\n        } else {\\n            return registerUser(user);\\n        }\\n    }\\n\\n    function getSecondsRemainingInBatch(uint256 auctionId)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        if (auctionData[auctionId].auctionEndDate < block.timestamp) {\\n            return 0;\\n        }\\n        return auctionData[auctionId].auctionEndDate.sub(block.timestamp);\\n    }\\n\\n    function containsOrder(uint256 auctionId, bytes32 order)\\n        public\\n        view\\n        returns (bool)\\n    {\\n        return sellOrders[auctionId].contains(order);\\n    }\\n}\\n\",\"keccak256\":\"0x152cb4a4d19a0418fab094903c2a451bfa06fd1fbd1aeb0d09a8f60a3d45e9d8\",\"license\":\"LGPL-3.0-or-newer\"},\"contracts/libraries/IdToAddressBiMap.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-or-newer\\npragma solidity ^0.6.0;\\n\\nlibrary IdToAddressBiMap {\\n    struct Data {\\n        mapping(uint64 => address) idToAddress;\\n        mapping(address => uint64) addressToId;\\n    }\\n\\n    function hasId(Data storage self, uint64 id) internal view returns (bool) {\\n        return self.idToAddress[id + 1] != address(0);\\n    }\\n\\n    function hasAddress(Data storage self, address addr)\\n        internal\\n        view\\n        returns (bool)\\n    {\\n        return self.addressToId[addr] != 0;\\n    }\\n\\n    function getAddressAt(Data storage self, uint64 id)\\n        internal\\n        view\\n        returns (address)\\n    {\\n        require(hasId(self, id), \\\"Must have ID to get Address\\\");\\n        return self.idToAddress[id + 1];\\n    }\\n\\n    function getId(Data storage self, address addr)\\n        internal\\n        view\\n        returns (uint64)\\n    {\\n        require(hasAddress(self, addr), \\\"Must have Address to get ID\\\");\\n        return self.addressToId[addr] - 1;\\n    }\\n\\n    function insert(\\n        Data storage self,\\n        uint64 id,\\n        address addr\\n    ) internal returns (bool) {\\n        require(addr != address(0), \\\"Cannot insert zero address\\\");\\n        require(id != uint64(-1), \\\"Cannot insert max uint64\\\");\\n        // Ensure bijectivity of the mappings\\n        if (\\n            self.addressToId[addr] != 0 ||\\n            self.idToAddress[id + 1] != address(0)\\n        ) {\\n            return false;\\n        }\\n        self.idToAddress[id + 1] = addr;\\n        self.addressToId[addr] = id + 1;\\n        return true;\\n    }\\n}\\n\",\"keccak256\":\"0x0d404b2e03864d7a388840e30bfb6da0ddd3dd2f152097894838b72d86e30a39\",\"license\":\"LGPL-3.0-or-newer\"},\"contracts/libraries/IterableOrderedOrderSet.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-or-newer\\npragma solidity >=0.6.8;\\n\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\n\\nlibrary IterableOrderedOrderSet {\\n    using SafeMath for uint96;\\n    using IterableOrderedOrderSet for bytes32;\\n\\n    // represents smallest possible value for an order under comparison of fn smallerThan()\\n    bytes32 internal constant QUEUE_START =\\n        0x0000000000000000000000000000000000000000000000000000000000000001;\\n    // represents highest possible value for an order under comparison of fn smallerThan()\\n    bytes32 internal constant QUEUE_END =\\n        0xffffffffffffffffffffffffffffffffffffffff000000000000000000000001;\\n\\n    struct Data {\\n        mapping(bytes32 => bytes32) nextMap;\\n        uint256 size;\\n    }\\n\\n    struct Order {\\n        uint64 owner;\\n        uint96 buyAmount;\\n        uint96 sellAmount;\\n    }\\n\\n    function insert(\\n        Data storage self,\\n        bytes32 elementToInsert,\\n        bytes32 elementBeforeNewOne\\n    ) internal returns (bool) {\\n        (, , uint96 denominator) = decodeOrder(elementToInsert);\\n        require(denominator != uint96(0), \\\"Inserting zero is not supported\\\");\\n\\n        if (contains(self, elementToInsert)) {\\n            return false;\\n        }\\n        bool foundposition = false;\\n        if (self.size == 0) {\\n            self.nextMap[QUEUE_START] = elementToInsert;\\n            self.nextMap[elementToInsert] = QUEUE_END;\\n        } else {\\n            require(\\n                elementBeforeNewOne == QUEUE_START ||\\n                    contains(self, elementBeforeNewOne),\\n                \\\"elementBeforeNewOne must be valid order\\\"\\n            );\\n            bytes32 elementBeforeNewOneIteration = elementBeforeNewOne;\\n            while (!foundposition) {\\n                if (elementBeforeNewOneIteration.smallerThan(elementToInsert)) {\\n                    if (\\n                        !self.nextMap[elementBeforeNewOneIteration].smallerThan(\\n                            elementToInsert\\n                        )\\n                    ) {\\n                        // Since we have:\\n                        // elementBeforeNewOneIteration<elementToInsert)<self.nextMap[elementBeforeNewOneIteration]\\n                        // the right place was found and the element gets inserted\\n                        bytes32 tmp =\\n                            self.nextMap[elementBeforeNewOneIteration];\\n                        self.nextMap[\\n                            elementBeforeNewOneIteration\\n                        ] = elementToInsert;\\n                        self.nextMap[elementToInsert] = tmp;\\n                        foundposition = true;\\n                    } else {\\n                        // Getting next order after the current elementBeforeNewOne.\\n                        // This can naturally occur, if new orders were inserted\\n                        // between time of on-chain execution and order sending\\n                        elementBeforeNewOneIteration = self.nextMap[\\n                            elementBeforeNewOneIteration\\n                        ];\\n                    }\\n                } else {\\n                    // elementBeforeNewOne was biggerThan elementToInsert\\n                    return false;\\n                }\\n            }\\n        }\\n        self.size++;\\n        return true;\\n    }\\n\\n    function remove(\\n        Data storage self,\\n        bytes32 elementToRemove,\\n        bytes32 elementBeforeRemoval\\n    ) internal returns (bool) {\\n        if (!contains(self, elementToRemove)) {\\n            return false;\\n        }\\n        bytes32 elementBeforeRemovalIteration = elementBeforeRemoval;\\n        while (self.nextMap[elementBeforeRemovalIteration] != elementToRemove) {\\n            if (elementBeforeRemovalIteration == QUEUE_END) {\\n                return false;\\n            }\\n            elementBeforeRemovalIteration = self.nextMap[\\n                elementBeforeRemovalIteration\\n            ];\\n        }\\n        self.nextMap[elementBeforeRemovalIteration] = self.nextMap[\\n            elementToRemove\\n        ];\\n        self.nextMap[elementToRemove] = bytes32(0);\\n        self.size--;\\n        return true;\\n    }\\n\\n    function contains(Data storage self, bytes32 value)\\n        internal\\n        view\\n        returns (bool)\\n    {\\n        if (value == QUEUE_START || value == QUEUE_END) {\\n            return false;\\n        }\\n        return self.nextMap[value] != bytes32(0);\\n    }\\n\\n    // @dev orders are ordered by\\n    // 1. their price - buyAmount/sellAmount and\\n    // 2. their userId,\\n    function smallerThan(bytes32 orderLeft, bytes32 orderRight)\\n        internal\\n        pure\\n        returns (bool)\\n    {\\n        (\\n            uint64 userIdLeft,\\n            uint96 priceNumeratorLeft,\\n            uint96 priceDenominatorLeft\\n        ) = decodeOrder(orderLeft);\\n        (\\n            uint64 userIdRight,\\n            uint96 priceNumeratorRight,\\n            uint96 priceDenominatorRight\\n        ) = decodeOrder(orderRight);\\n\\n        if (\\n            priceNumeratorLeft.mul(priceDenominatorRight) <\\n            priceNumeratorRight.mul(priceDenominatorLeft)\\n        ) return true;\\n        if (\\n            priceNumeratorLeft.mul(priceDenominatorRight) >\\n            priceNumeratorRight.mul(priceDenominatorLeft)\\n        ) return false;\\n\\n        require(\\n            userIdLeft != userIdRight,\\n            \\\"user is not allowed to place same order twice\\\"\\n        );\\n        if (userIdLeft < userIdRight) {\\n            return true;\\n        }\\n        return false;\\n    }\\n\\n    function first(Data storage self) internal view returns (bytes32) {\\n        require(self.size > 0, \\\"Trying to get first from empty set\\\");\\n        return self.nextMap[QUEUE_START];\\n    }\\n\\n    function next(Data storage self, bytes32 value)\\n        internal\\n        view\\n        returns (bytes32)\\n    {\\n        require(\\n            value != QUEUE_END,\\n            \\\"Trying to get next of non-existent element\\\"\\n        );\\n        require(\\n            self.nextMap[value] != bytes32(0),\\n            \\\"Trying to get next of last element\\\"\\n        );\\n        return self.nextMap[value];\\n    }\\n\\n    function decodeOrder(bytes32 _orderData)\\n        internal\\n        pure\\n        returns (\\n            uint64 userId,\\n            uint96 buyAmount,\\n            uint96 sellAmount\\n        )\\n    {\\n        userId = uint64(uint256(_orderData) / 2**192);\\n        buyAmount = uint96((uint256(_orderData) % 2**192) / 2**96);\\n        sellAmount = uint96((uint256(_orderData) % 2**96));\\n    }\\n\\n    function encodeOrder(\\n        uint64 userId,\\n        uint96 buyAmount,\\n        uint96 sellAmount\\n    ) internal pure returns (bytes32) {\\n        return\\n            bytes32(\\n                uint256(userId) *\\n                    2**192 +\\n                    uint256(buyAmount) *\\n                    2**96 +\\n                    uint256(sellAmount)\\n            );\\n    }\\n}\\n\",\"keccak256\":\"0xf9c80241508ae6a51ff458971c25765432bdc669d344f2f2a0bfbf0337b7464c\",\"license\":\"LGPL-3.0-or-newer\"}},\"version\":1}",
  "bytecode": "0x608060405260006007556000600860006101000a81548167ffffffffffffffff021916908367ffffffffffffffff1602179055503480156200004057600080fd5b50600062000053620000f760201b60201c565b9050806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a350620000ff565b600033905090565b614bc0806200010f6000396000f3fe608060405234801561001057600080fd5b50600436106101375760003560e01c806363c699a4116100b8578063c1110dd61161007c578063c1110dd6146106d1578063cc76310914610842578063d73792a914610a4a578063e86dea4a14610a68578063f2fde38b14610a86578063f9f0751a14610aca57610137565b806363c699a41461056b578063715018a6146105b957806375d3c2d6146105c35780638da5cb5b1461067f578063a7e76644146106b357610137565b806340b20b09116100ff57806340b20b09146102a25780634a8393f3146102f057806355fc62d21461033257806356a23c5a146103ed5780635cefb2911461054357610137565b806315d37b4b1461013c57806319a50f491461017e5780632199d5cd146101a65780632b956ff7146102085780633e12905f1461026a575b600080fd5b6101686004803603602081101561015257600080fd5b8101908080359060200190929190505050610b02565b6040518082815260200191505060405180910390f35b610186610b5c565b604051808267ffffffffffffffff16815260200191505060405180910390f35b6101e8600480360360208110156101bc57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610b76565b604051808267ffffffffffffffff16815260200191505060405180910390f35b61024a6004803603602081101561021e57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610cf0565b604051808267ffffffffffffffff16815260200191505060405180910390f35b6102a06004803603604081101561028057600080fd5b810190808035906020019092919080359060200190929190505050610d37565b005b6102ee600480360360408110156102b857600080fd5b8101908080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610fbf565b005b61031c6004803603602081101561030657600080fd5b810190808035906020019092919050505061111d565b6040518082815260200191505060405180910390f35b61035e6004803603602081101561034857600080fd5b810190808035906020019092919050505061113b565b604051808b73ffffffffffffffffffffffffffffffffffffffff1681526020018a73ffffffffffffffffffffffffffffffffffffffff168152602001898152602001888152602001878152602001868152602001858152602001848152602001836bffffffffffffffffffffffff1681526020018281526020019a505050505050505050505060405180910390f35b6105416004803603606081101561040357600080fd5b81019080803590602001909291908035906020019064010000000081111561042a57600080fd5b82018360208201111561043c57600080fd5b8035906020019184602083028401116401000000008311171561045e57600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f820116905080830192505050505050509192919290803590602001906401000000008111156104be57600080fd5b8201836020820111156104d057600080fd5b803590602001918460208302840111640100000000831117156104f257600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f8201169050808301925050505050505091929192905050506111e7565b005b61054b61145a565b604051808267ffffffffffffffff16815260200191505060405180910390f35b6105a16004803603604081101561058157600080fd5b810190808035906020019092919080359060200190929190505050611474565b60405180821515815260200191505060405180910390f35b6105c16114a3565b005b610669600480360360c08110156105d957600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919080356bffffffffffffffffffffffff16906020019092919080356bffffffffffffffffffffffff16906020019092919080359060200190929190505050611629565b6040518082815260200191505060405180910390f35b610687611941565b604051808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b6106bb61196a565b6040518082815260200191505060405180910390f35b610825600480360360608110156106e757600080fd5b81019080803590602001909291908035906020019064010000000081111561070e57600080fd5b82018360208201111561072057600080fd5b8035906020019184602083028401116401000000008311171561074257600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f820116905080830192505050505050509192919290803590602001906401000000008111156107a257600080fd5b8201836020820111156107b457600080fd5b803590602001918460208302840111640100000000831117156107d657600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f820116905080830192505050505050509192919290505050611970565b604051808381526020018281526020019250505060405180910390f35b610a2a6004803603608081101561085857600080fd5b81019080803590602001909291908035906020019064010000000081111561087f57600080fd5b82018360208201111561089157600080fd5b803590602001918460208302840111640100000000831117156108b357600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f8201169050808301925050505050505091929192908035906020019064010000000081111561091357600080fd5b82018360208201111561092557600080fd5b8035906020019184602083028401116401000000008311171561094757600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f820116905080830192505050505050509192919290803590602001906401000000008111156109a757600080fd5b8201836020820111156109b957600080fd5b803590602001918460208302840111640100000000831117156109db57600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f820116905080830192505050505050509192919290505050611f13565b604051808267ffffffffffffffff16815260200191505060405180910390f35b610a52612300565b6040518082815260200191505060405180910390f35b610a70612306565b6040518082815260200191505060405180910390f35b610ac860048036036020811015610a9c57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061230c565b005b610b0060048036036040811015610ae057600080fd5b810190808035906020019092919080359060200190929190505050612517565b005b60004260026000848152602001908152602001600020600201541015610b2b5760009050610b57565b610b54426002600085815260200190815260200160002060020154612cb490919063ffffffff16565b90505b919050565b600560009054906101000a900467ffffffffffffffff1681565b6000610ba4600560009054906101000a900467ffffffffffffffff16836003612cfe9092919063ffffffff16565b610c16576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260178152602001807f5573657220616c7265616479207265676973746572656400000000000000000081525060200191505060405180910390fd5b600560009054906101000a900467ffffffffffffffff169050610c6b610c666001600560009054906101000a900467ffffffffffffffff1667ffffffffffffffff1661302490919063ffffffff16565b6130ac565b600560006101000a81548167ffffffffffffffff021916908367ffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff167f6838f67cb358c332087b73dbe769a6c869a5f87225236c16dda5d0013a77074c82604051808267ffffffffffffffff16815260200191505060405180910390a2919050565b6000610d0682600361311790919063ffffffff16565b15610d2657610d1f82600361318490919063ffffffff16565b9050610d32565b610d2f82610b76565b90505b919050565b81600260008281526020019081526020016000206002015442118015610d7557506000801b6002600083815260200190815260200160002060070154145b610dca576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526028815260200180614ac16028913960400191505060405180910390fd5b6000610deb6002600086815260200190815260200160002060030154613263565b925050506000600260008681526020019081526020016000206005015490506000600260008781526020019081526020016000206006015490506000801b811415610e3857600160001b90505b60005b85811015610eaa57610e6882600160008a81526020019081526020016000206132f190919063ffffffff16565b91506000610e7583613263565b92505050610e9a816bffffffffffffffffffffffff168561302490919063ffffffff16565b9350508080600101915050610e3b565b50600080610eb783613263565b9250925050610eeb816bffffffffffffffffffffffff16866bffffffffffffffffffffffff166133fe90919063ffffffff16565b610f0c836bffffffffffffffffffffffff16866133fe90919063ffffffff16565b10610f7f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260198152602001807f746f6f206d616e79206f72646572732073756d6d65642075700000000000000081525060200191505060405180910390fd5b83600260008a81526020019081526020016000206005018190555082600260008a8152602001908152602001600020600601819055505050505050505050565b610fc7613484565b73ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614611087576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b600f8211156110e1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602d815260200180614971602d913960400191505060405180910390fd5b6110ea81610cf0565b600860006101000a81548167ffffffffffffffff021916908367ffffffffffffffff160217905550816007819055505050565b60016020528060005260406000206000915090508060010154905081565b60026020528060005260406000206000915090508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060020154908060030154908060040154908060050154908060060154908060070154908060080160009054906101000a90046bffffffffffffffffffffffff1690806009015490508a565b8260026000828152602001908152602001600020600201544210611256576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526022815260200180614b696022913960400191505060405180910390fd5b600061126133610cf0565b90506000805b85518110156113f057600080600061129189858151811061128457fe5b6020026020010151613263565b9250925092508567ffffffffffffffff168367ffffffffffffffff1614611303576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260238152602001806148b06023913960400191505060405180910390fd5b61135089858151811061131257fe5b602002602001015189868151811061132657fe5b6020026020010151600160008e815260200190815260200160002061348c9092919063ffffffff16565b156113e057611376816bffffffffffffffffffffffff168661302490919063ffffffff16565b94508567ffffffffffffffff168a7f7edae327fe79804b2f38bd490d874a0d188d3ae8911b303205abe47400086ac4848460405180836bffffffffffffffffffffffff168152602001826bffffffffffffffffffffffff1681526020019250505060405180910390a35b5050508080600101915050611267565b506114523382600260008a815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166135879092919063ffffffff16565b505050505050565b600860009054906101000a900467ffffffffffffffff1681565b600061149b826001600086815260200190815260200160002061362990919063ffffffff16565b905092915050565b6114ab613484565b73ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161461156b576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a360008060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b60008061163533610cf0565b90506116ae33306116876103e861167961165c6007546103e861302490919063ffffffff16565b8b6bffffffffffffffffffffffff166133fe90919063ffffffff16565b61369290919063ffffffff16565b8b73ffffffffffffffffffffffffffffffffffffffff166136dc909392919063ffffffff16565b60008311611707576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526037815260200180614a206037913960400191505060405180910390fd5b6006600081548092919060010191905055506040518061014001604052808973ffffffffffffffffffffffffffffffffffffffff1681526020018873ffffffffffffffffffffffffffffffffffffffff168152602001874201815260200161177083878961379d565b8152602001848152602001600081526020016000801b81526020016000801b815260200160006bffffffffffffffffffffffff16815260200160075481525060026000600654815260200190815260200160002060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060408201518160020155606082015181600301556080820151816004015560a0820151816005015560c0820151816006015560e082015181600701556101008201518160080160006101000a8154816bffffffffffffffffffffffff02191690836bffffffffffffffffffffffff16021790555061012082015181600901559050508673ffffffffffffffffffffffffffffffffffffffff168873ffffffffffffffffffffffffffffffffffffffff166006547f15dd9639accd24fcb10b44fe33886ce03e228e4e6ba1f65791edf66fa4acfa0360405160405180910390a46006549150509695505050505050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60065481565b600080846000801b60026000838152602001908152602001600020600701541415611a03576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260188152602001807f41756374696f6e206e6f74207965742066696e6973686564000000000000000081525060200191505060405180910390fd5b611a0b614819565b60026000888152602001908152602001600020604051806101400160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016002820154815260200160038201548152602001600482015481526020016005820154815260200160068201548152602001600782015481526020016008820160009054906101000a90046bffffffffffffffffffffffff166bffffffffffffffffffffffff166bffffffffffffffffffffffff1681526020016009820154815250509050600080611b6c8360e00151613263565b92509250506000611b9089600081518110611b8357fe5b6020026020010151613263565b5050905060005b8951811015611ef957611bed8a8281518110611baf57fe5b60200260200101518a8381518110611bc357fe5b6020026020010151600160008f815260200190815260200160002061348c9092919063ffffffff16565b611c5f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601c8152602001807f6f72646572206973206e6f206c6f6e67657220636c61696d61626c650000000081525060200191505060405180910390fd5b6000806000611c808d8581518110611c7357fe5b6020026020010151613263565b9250925092508467ffffffffffffffff168367ffffffffffffffff1614611cf2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526023815260200180614a9e6023913960400191505060405180910390fd5b8760e001518d8581518110611d0357fe5b60200260200101511415611dc657611d77611d68876bffffffffffffffffffffffff16611d5a8a6bffffffffffffffffffffffff168c61010001516bffffffffffffffffffffffff166133fe90919063ffffffff16565b61369290919063ffffffff16565b8c61302490919063ffffffff16565b9a50611dbf611db08961010001516bffffffffffffffffffffffff16836bffffffffffffffffffffffff16612cb490919063ffffffff16565b8b61302490919063ffffffff16565b9950611e82565b611df08860e001518e8681518110611dda57fe5b602002602001015161380090919063ffffffff16565b15611e5d57611e56611e47876bffffffffffffffffffffffff16611e398a6bffffffffffffffffffffffff16856bffffffffffffffffffffffff166133fe90919063ffffffff16565b61369290919063ffffffff16565b8c61302490919063ffffffff16565b9a50611e81565b611e7e816bffffffffffffffffffffffff168b61302490919063ffffffff16565b99505b5b8467ffffffffffffffff168e7f3f2c83616e48a2f8b3c9cc26499e2e5c61643714dac49027d82cf6732f96a91a848460405180836bffffffffffffffffffffffff168152602001826bffffffffffffffffffffffff1681526020019250505060405180910390a35050508080600101915050611b97565b50611f068a8888846139b8565b5050505050935093915050565b60008460026000828152602001908152602001600020600201544210611f84576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526022815260200180614b696022913960400191505060405180910390fd5b600080611fa6600260008a815260200190815260200160002060030154613263565b92509250506000611fb633610cf0565b945060005b885181101561229057612006888281518110611fd357fe5b60200260200101516bffffffffffffffffffffffff16846bffffffffffffffffffffffff166133fe90919063ffffffff16565b612048856bffffffffffffffffffffffff168b848151811061202457fe5b60200260200101516bffffffffffffffffffffffff166133fe90919063ffffffff16565b1061209e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526029815260200180614b166029913960400191505060405180910390fd5b600260008b8152602001908152602001600020600401548982815181106120c157fe5b60200260200101516bffffffffffffffffffffffff161161214a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600f8152602001807f6f7264657220746f6f20736d616c6c000000000000000000000000000000000081525060200191505060405180910390fd5b60006121b6612180888c858151811061215f57fe5b60200260200101518c868151811061217357fe5b602002602001015161379d565b89848151811061218c57fe5b6020026020010151600160008f8152602001908152602001600020613aad9092919063ffffffff16565b90508015612282576121f28983815181106121cd57fe5b60200260200101516bffffffffffffffffffffffff168461302490919063ffffffff16565b92508667ffffffffffffffff168b7f9304f2fc7ed6d42c0400e678dbc7283e1e9054889c3afea5f965adff66ef9eac8c858151811061222d57fe5b60200260200101518c868151811061224157fe5b602002602001015160405180836bffffffffffffffffffffffff168152602001826bffffffffffffffffffffffff1681526020019250505060405180910390a35b508080600101915050611fbb565b506122f4333083600260008e815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166136dc909392919063ffffffff16565b50505050949350505050565b6103e881565b60075481565b612314613484565b73ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146123d4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141561245a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260268152602001806148d36026913960400191505060405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b8160026000828152602001908152602001600020600201544211801561255557506000801b6002600083815260200190815260200160002060070154145b6125aa576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526028815260200180614ac16028913960400191505060405180910390fd5b6000806125b684613263565b925092505060008060006125df600260008a815260200190815260200160002060030154613263565b9250925092506000856bffffffffffffffffffffffff1611612669576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260158152602001807f7072696365206d75737420626520706f7374697665000000000000000000000081525060200191505060405180910390fd5b6000600260008a81526020019081526020016000206005015490506000600260008b81526020019081526020016000206006015490506000801b8114156126b257600160001b90505b6000600160008c815260200190815260200160002060010154111561277d576126f681600160008d81526020019081526020016000206132f190919063ffffffff16565b90505b8881141580156127185750612717898261380090919063ffffffff16565b5b1561277c57600061272882613263565b9250505061274d816bffffffffffffffffffffffff168461302490919063ffffffff16565b925061277482600160008e81526020019081526020016000206132f190919063ffffffff16565b9150506126f9565b5b60006127c0876bffffffffffffffffffffffff166127b28a6bffffffffffffffffffffffff16866133fe90919063ffffffff16565b61369290919063ffffffff16565b9050818a14156129775760006127d583613263565b9250505060006127fc83876bffffffffffffffffffffffff16612cb490919063ffffffff16565b90506128476128428b6bffffffffffffffffffffffff166128348c6bffffffffffffffffffffffff16856133fe90919063ffffffff16565b61369290919063ffffffff16565b6130ac565b67ffffffffffffffff16600260008f815260200190815260200160002060080160006101000a8154816bffffffffffffffffffffffff02191690836bffffffffffffffffffffffff160217905550816bffffffffffffffffffffffff16600260008f815260200190815260200160002060080160009054906101000a90046bffffffffffffffffffffffff166bffffffffffffffffffffffff161115612955576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601f8152602001807f6f726465722063616e206e6f7420626520636c656172696e67206f726465720081525060200191505060405180910390fd5b83600260008f8152602001908152602001600020600701819055505050612c17565b836bffffffffffffffffffffffff16811015612ac2576129bc876bffffffffffffffffffffffff16856bffffffffffffffffffffffff166133fe90919063ffffffff16565b6129eb866bffffffffffffffffffffffff168a6bffffffffffffffffffffffff166133fe90919063ffffffff16565b14612a41576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260308152602001806148f96030913960400191505060405180910390fd5b612a4a816130ac565b67ffffffffffffffff16600260008d815260200190815260200160002060080160006101000a8154816bffffffffffffffffffffffff02191690836bffffffffffffffffffffffff160217905550612aa386898961379d565b600260008d815260200190815260200160002060070181905550612c16565b89600260008d815260200190815260200160002060070181905550836bffffffffffffffffffffffff168114612b60576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601b8152602001807f7072696365206973206e6f7420636c656172696e67207072696365000000000081525060200191505060405180910390fd5b612b8f876bffffffffffffffffffffffff16856bffffffffffffffffffffffff166133fe90919063ffffffff16565b612bbe866bffffffffffffffffffffffff168a6bffffffffffffffffffffffff166133fe90919063ffffffff16565b1115612c15576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260318152602001806149c56031913960400191505060405180910390fd5b5b5b8a7f8e633245b93c41d24c82377f869edd0ac49ea9084bb0fa0265125a7b1df7fc95898960405180836bffffffffffffffffffffffff168152602001826bffffffffffffffffffffffff1681526020019250505060405180910390a26000600260008d8152602001908152602001600020600901541115612c9c57612c9b8b613d3e565b5b612ca58b613f8a565b50505050505050505050505050565b6000612cf683836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f7700008152506141ab565b905092915050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415612da2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601a8152602001807f43616e6e6f7420696e73657274207a65726f206164647265737300000000000081525060200191505060405180910390fd5b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff67ffffffffffffffff168367ffffffffffffffff161415612e4c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260188152602001807f43616e6e6f7420696e73657274206d61782075696e743634000000000000000081525060200191505060405180910390fd5b60008460010160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900467ffffffffffffffff1667ffffffffffffffff16141580612f345750600073ffffffffffffffffffffffffffffffffffffffff168460000160006001860167ffffffffffffffff1667ffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614155b15612f42576000905061301d565b818460000160006001860167ffffffffffffffff1667ffffffffffffffff16815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600183018460010160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548167ffffffffffffffff021916908367ffffffffffffffff160217905550600190505b9392505050565b6000808284019050838110156130a2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601b8152602001807f536166654d6174683a206164646974696f6e206f766572666c6f77000000000081525060200191505060405180910390fd5b8091505092915050565b600068010000000000000000821061310f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526026815260200180614a786026913960400191505060405180910390fd5b819050919050565b6000808360010160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900467ffffffffffffffff1667ffffffffffffffff161415905092915050565b60006131908383613117565b613202576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601b8152602001807f4d7573742068617665204164647265737320746f20676574204944000000000081525060200191505060405180910390fd5b60018360010160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900467ffffffffffffffff1603905092915050565b600080600078010000000000000000000000000000000000000000000000008460001c8161328d57fe5b0492506c0100000000000000000000000078010000000000000000000000000000000000000000000000008560001c816132c357fe5b06816132cb57fe5b0491506c010000000000000000000000008460001c816132e757fe5b0690509193909250565b60007fffffffffffffffffffffffffffffffffffffffff00000000000000000000000160001b82141561336f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602a8152602001806149f6602a913960400191505060405180910390fd5b6000801b8360000160008481526020019081526020016000205414156133e0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260228152602001806149296022913960400191505060405180910390fd5b82600001600083815260200190815260200160002054905092915050565b600080831415613411576000905061347e565b600082840290508284828161342257fe5b0414613479576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526021815260200180614a576021913960400191505060405180910390fd5b809150505b92915050565b600033905090565b60006134988484613629565b6134a55760009050613580565b60008290505b838560000160008381526020019081526020016000205414613519577fffffffffffffffffffffffffffffffffffffffff00000000000000000000000160001b8114156134fc576000915050613580565b8460000160008281526020019081526020016000205490506134ab565b84600001600085815260200190815260200160002054856000016000838152602001908152602001600020819055506000801b8560000160008681526020019081526020016000208190555084600101600081548092919060019003919050555060019150505b9392505050565b6136248363a9059cbb60e01b8484604051602401808373ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505061426b565b505050565b6000600160001b82148061365f57507fffffffffffffffffffffffffffffffffffffffff00000000000000000000000160001b82145b1561366d576000905061368c565b6000801b83600001600084815260200190815260200160002054141590505b92915050565b60006136d483836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f00000000000081525061435a565b905092915050565b613797846323b872dd60e01b858585604051602401808473ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019350505050604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505061426b565b50505050565b6000816bffffffffffffffffffffffff166c01000000000000000000000000846bffffffffffffffffffffffff160278010000000000000000000000000000000000000000000000008667ffffffffffffffff1602010160001b90509392505050565b60008060008061380f86613263565b925092509250600080600061382388613263565b925092509250613858846bffffffffffffffffffffffff16836bffffffffffffffffffffffff166133fe90919063ffffffff16565b613887826bffffffffffffffffffffffff16876bffffffffffffffffffffffff166133fe90919063ffffffff16565b101561389c57600196505050505050506139b2565b6138cb846bffffffffffffffffffffffff16836bffffffffffffffffffffffff166133fe90919063ffffffff16565b6138fa826bffffffffffffffffffffffff16876bffffffffffffffffffffffff166133fe90919063ffffffff16565b111561390f57600096505050505050506139b2565b8267ffffffffffffffff168667ffffffffffffffff16141561397c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602d815260200180614ae9602d913960400191505060405180910390fd5b8267ffffffffffffffff168667ffffffffffffffff1610156139a757600196505050505050506139b2565b600096505050505050505b92915050565b60006139ce82600361442090919063ffffffff16565b90506000841115613a3b57613a3a81856002600089815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166135879092919063ffffffff16565b5b6000831115613aa657613aa581846002600089815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166135879092919063ffffffff16565b5b5050505050565b600080613ab984613263565b9250505060006bffffffffffffffffffffffff16816bffffffffffffffffffffffff161415613b50576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601f8152602001807f496e73657274696e67207a65726f206973206e6f7420737570706f727465640081525060200191505060405180910390fd5b613b5a8585613629565b15613b69576000915050613d37565b60008086600101541415613bd75784866000016000600160001b8152602001908152602001600020819055507fffffffffffffffffffffffffffffffffffffffff00000000000000000000000160001b86600001600087815260200190815260200160002081905550613d1c565b600160001b841480613bef5750613bee8685613629565b5b613c44576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602781526020018061499e6027913960400191505060405180910390fd5b60008490505b81613d1a57613c62868261380090919063ffffffff16565b15613d0957613c8f868860000160008481526020019081526020016000205461380090919063ffffffff16565b613ceb576000876000016000838152602001908152602001600020549050868860000160008481526020019081526020016000208190555080886000016000898152602001908152602001600020819055506001925050613d04565b8660000160008281526020019081526020016000205490505b613d15565b60009350505050613d37565b613c4a565b505b85600101600081548092919060010191905055506001925050505b9392505050565b6000806000613d626002600086815260200190815260200160002060030154613263565b925092509250600080613d8a6002600088815260200190815260200160002060070154613263565b92509250506000613ddc6103e8613dce600260008b815260200190815260200160002060090154876bffffffffffffffffffffffff166133fe90919063ffffffff16565b61369290919063ffffffff16565b9050613e0d846bffffffffffffffffffffffff16836bffffffffffffffffffffffff166133fe90919063ffffffff16565b613e3c866bffffffffffffffffffffffff16856bffffffffffffffffffffffff166133fe90919063ffffffff16565b1415613f5d576000613ea1600260008a815260200190815260200160002060080160009054906101000a90046bffffffffffffffffffffffff166bffffffffffffffffffffffff16866bffffffffffffffffffffffff16612cb490919063ffffffff16565b9050613ef888613eda876bffffffffffffffffffffffff16613ecc85876133fe90919063ffffffff16565b61369290919063ffffffff16565b6000600860009054906101000a900467ffffffffffffffff166139b8565b613f5788613f4f876bffffffffffffffffffffffff16613f41613f32868b6bffffffffffffffffffffffff16612cb490919063ffffffff16565b876133fe90919063ffffffff16565b61369290919063ffffffff16565b60008a6139b8565b50613f81565b613f8087826000600860009054906101000a900467ffffffffffffffff166139b8565b5b50505050505050565b6000806000806000613fb16002600088815260200190815260200160002060030154613263565b9250925092506000801b6002600088815260200190815260200160002060030181905550600080613ff7600260008a815260200190815260200160002060070154613263565b925092505061402b836bffffffffffffffffffffffff16826bffffffffffffffffffffffff166133fe90919063ffffffff16565b61405a856bffffffffffffffffffffffff16846bffffffffffffffffffffffff166133fe90919063ffffffff16565b1415614143576140bd600260008a815260200190815260200160002060080160009054906101000a90046bffffffffffffffffffffffff166bffffffffffffffffffffffff16846bffffffffffffffffffffffff16612cb490919063ffffffff16565b965061413c826bffffffffffffffffffffffff1661412e836bffffffffffffffffffffffff16600260008d815260200190815260200160002060080160009054906101000a90046bffffffffffffffffffffffff166bffffffffffffffffffffffff166133fe90919063ffffffff16565b61369290919063ffffffff16565b9550614195565b614192826bffffffffffffffffffffffff16614184836bffffffffffffffffffffffff16866bffffffffffffffffffffffff166133fe90919063ffffffff16565b61369290919063ffffffff16565b95505b6141a1888888886139b8565b5050505050915091565b6000838311158290614258576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561421d578082015181840152602081019050614202565b50505050905090810190601f16801561424a5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b5060008385039050809150509392505050565b60606142cd826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff166144f39092919063ffffffff16565b9050600081511115614355578080602001905160208110156142ee57600080fd5b8101908080519060200190929190505050614354576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602a815260200180614b3f602a913960400191505060405180910390fd5b5b505050565b60008083118290614406576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b838110156143cb5780820151818401526020810190506143b0565b50505050905090810190601f1680156143f85780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b50600083858161441257fe5b049050809150509392505050565b600061442c838361450b565b61449e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601b8152602001807f4d757374206861766520494420746f206765742041646472657373000000000081525060200191505060405180910390fd5b8260000160006001840167ffffffffffffffff1667ffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905092915050565b60606145028484600085614591565b90509392505050565b60008073ffffffffffffffffffffffffffffffffffffffff168360000160006001850167ffffffffffffffff1667ffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415905092915050565b6060824710156145ec576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602681526020018061494b6026913960400191505060405180910390fd5b6145f58561473a565b614667576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601d8152602001807f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000081525060200191505060405180910390fd5b600060608673ffffffffffffffffffffffffffffffffffffffff1685876040518082805190602001908083835b602083106146b75780518252602082019150602081019050602083039250614694565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d8060008114614719576040519150601f19603f3d011682016040523d82523d6000602084013e61471e565b606091505b509150915061472e82828661474d565b92505050949350505050565b600080823b905060008111915050919050565b6060831561475d57829050614812565b6000835111156147705782518084602001fd5b816040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b838110156147d75780820151818401526020810190506147bc565b50505050905090810190601f1680156148045780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b9392505050565b604051806101400160405280600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff16815260200160008152602001600080191681526020016000815260200160008152602001600080191681526020016000801916815260200160006bffffffffffffffffffffffff16815260200160008152509056fe4f6e6c792074686520757365722063616e2063616e63656c20686973206f72646572734f776e61626c653a206e6577206f776e657220697320746865207a65726f2061646472657373737570706c696564207072696365206d75737420626520696e766572736520696e697469616c4f726465724c696d6974547279696e6720746f20676574206e657874206f66206c61737420656c656d656e74416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c6c466565206973206e6f7420616c6c6f77656420746f2062652073657420686967686572207468616e20312e3525656c656d656e744265666f72654e65774f6e65206d7573742062652076616c6964206f72646572636c656172696e6720707269636520697320626574746572207468616e20696e697469616c41756374696f6e4f72646572547279696e6720746f20676574206e657874206f66206e6f6e2d6578697374656e7420656c656d656e746d696e696d756d50617274696369706174696f6e427579416d6f756e74206973206e6f7420616c6c6f77656420746f206265207a65726f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f7753616665436173743a2076616c756520646f65736e27742066697420696e20363420626974736f6e6c7920616c6c6f77656420746f20636c61696d20666f722073616d65207573657241756374696f6e206e6f7420696e20736f6c7574696f6e207375626d697373696f6e20706861736575736572206973206e6f7420616c6c6f77656420746f20706c6163652073616d65206f726465722074776963656c696d6974207072696365206e6f7420626574746572207468616e206d696d696d616c206f666665725361666545524332303a204552433230206f7065726174696f6e20646964206e6f7420737563636565646e6f206c6f6e67657220696e206f7264657220706c6163656d656e74207068617365a264697066735822122087648d3101dce68dec4f4429a181f251fd6de6f17bd45a5dd7cb4737d6bf1ba164736f6c634300060c0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101375760003560e01c806363c699a4116100b8578063c1110dd61161007c578063c1110dd6146106d1578063cc76310914610842578063d73792a914610a4a578063e86dea4a14610a68578063f2fde38b14610a86578063f9f0751a14610aca57610137565b806363c699a41461056b578063715018a6146105b957806375d3c2d6146105c35780638da5cb5b1461067f578063a7e76644146106b357610137565b806340b20b09116100ff57806340b20b09146102a25780634a8393f3146102f057806355fc62d21461033257806356a23c5a146103ed5780635cefb2911461054357610137565b806315d37b4b1461013c57806319a50f491461017e5780632199d5cd146101a65780632b956ff7146102085780633e12905f1461026a575b600080fd5b6101686004803603602081101561015257600080fd5b8101908080359060200190929190505050610b02565b6040518082815260200191505060405180910390f35b610186610b5c565b604051808267ffffffffffffffff16815260200191505060405180910390f35b6101e8600480360360208110156101bc57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610b76565b604051808267ffffffffffffffff16815260200191505060405180910390f35b61024a6004803603602081101561021e57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610cf0565b604051808267ffffffffffffffff16815260200191505060405180910390f35b6102a06004803603604081101561028057600080fd5b810190808035906020019092919080359060200190929190505050610d37565b005b6102ee600480360360408110156102b857600080fd5b8101908080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610fbf565b005b61031c6004803603602081101561030657600080fd5b810190808035906020019092919050505061111d565b6040518082815260200191505060405180910390f35b61035e6004803603602081101561034857600080fd5b810190808035906020019092919050505061113b565b604051808b73ffffffffffffffffffffffffffffffffffffffff1681526020018a73ffffffffffffffffffffffffffffffffffffffff168152602001898152602001888152602001878152602001868152602001858152602001848152602001836bffffffffffffffffffffffff1681526020018281526020019a505050505050505050505060405180910390f35b6105416004803603606081101561040357600080fd5b81019080803590602001909291908035906020019064010000000081111561042a57600080fd5b82018360208201111561043c57600080fd5b8035906020019184602083028401116401000000008311171561045e57600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f820116905080830192505050505050509192919290803590602001906401000000008111156104be57600080fd5b8201836020820111156104d057600080fd5b803590602001918460208302840111640100000000831117156104f257600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f8201169050808301925050505050505091929192905050506111e7565b005b61054b61145a565b604051808267ffffffffffffffff16815260200191505060405180910390f35b6105a16004803603604081101561058157600080fd5b810190808035906020019092919080359060200190929190505050611474565b60405180821515815260200191505060405180910390f35b6105c16114a3565b005b610669600480360360c08110156105d957600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919080356bffffffffffffffffffffffff16906020019092919080356bffffffffffffffffffffffff16906020019092919080359060200190929190505050611629565b6040518082815260200191505060405180910390f35b610687611941565b604051808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b6106bb61196a565b6040518082815260200191505060405180910390f35b610825600480360360608110156106e757600080fd5b81019080803590602001909291908035906020019064010000000081111561070e57600080fd5b82018360208201111561072057600080fd5b8035906020019184602083028401116401000000008311171561074257600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f820116905080830192505050505050509192919290803590602001906401000000008111156107a257600080fd5b8201836020820111156107b457600080fd5b803590602001918460208302840111640100000000831117156107d657600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f820116905080830192505050505050509192919290505050611970565b604051808381526020018281526020019250505060405180910390f35b610a2a6004803603608081101561085857600080fd5b81019080803590602001909291908035906020019064010000000081111561087f57600080fd5b82018360208201111561089157600080fd5b803590602001918460208302840111640100000000831117156108b357600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f8201169050808301925050505050505091929192908035906020019064010000000081111561091357600080fd5b82018360208201111561092557600080fd5b8035906020019184602083028401116401000000008311171561094757600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f820116905080830192505050505050509192919290803590602001906401000000008111156109a757600080fd5b8201836020820111156109b957600080fd5b803590602001918460208302840111640100000000831117156109db57600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f820116905080830192505050505050509192919290505050611f13565b604051808267ffffffffffffffff16815260200191505060405180910390f35b610a52612300565b6040518082815260200191505060405180910390f35b610a70612306565b6040518082815260200191505060405180910390f35b610ac860048036036020811015610a9c57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061230c565b005b610b0060048036036040811015610ae057600080fd5b810190808035906020019092919080359060200190929190505050612517565b005b60004260026000848152602001908152602001600020600201541015610b2b5760009050610b57565b610b54426002600085815260200190815260200160002060020154612cb490919063ffffffff16565b90505b919050565b600560009054906101000a900467ffffffffffffffff1681565b6000610ba4600560009054906101000a900467ffffffffffffffff16836003612cfe9092919063ffffffff16565b610c16576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260178152602001807f5573657220616c7265616479207265676973746572656400000000000000000081525060200191505060405180910390fd5b600560009054906101000a900467ffffffffffffffff169050610c6b610c666001600560009054906101000a900467ffffffffffffffff1667ffffffffffffffff1661302490919063ffffffff16565b6130ac565b600560006101000a81548167ffffffffffffffff021916908367ffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff167f6838f67cb358c332087b73dbe769a6c869a5f87225236c16dda5d0013a77074c82604051808267ffffffffffffffff16815260200191505060405180910390a2919050565b6000610d0682600361311790919063ffffffff16565b15610d2657610d1f82600361318490919063ffffffff16565b9050610d32565b610d2f82610b76565b90505b919050565b81600260008281526020019081526020016000206002015442118015610d7557506000801b6002600083815260200190815260200160002060070154145b610dca576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526028815260200180614ac16028913960400191505060405180910390fd5b6000610deb6002600086815260200190815260200160002060030154613263565b925050506000600260008681526020019081526020016000206005015490506000600260008781526020019081526020016000206006015490506000801b811415610e3857600160001b90505b60005b85811015610eaa57610e6882600160008a81526020019081526020016000206132f190919063ffffffff16565b91506000610e7583613263565b92505050610e9a816bffffffffffffffffffffffff168561302490919063ffffffff16565b9350508080600101915050610e3b565b50600080610eb783613263565b9250925050610eeb816bffffffffffffffffffffffff16866bffffffffffffffffffffffff166133fe90919063ffffffff16565b610f0c836bffffffffffffffffffffffff16866133fe90919063ffffffff16565b10610f7f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260198152602001807f746f6f206d616e79206f72646572732073756d6d65642075700000000000000081525060200191505060405180910390fd5b83600260008a81526020019081526020016000206005018190555082600260008a8152602001908152602001600020600601819055505050505050505050565b610fc7613484565b73ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614611087576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b600f8211156110e1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602d815260200180614971602d913960400191505060405180910390fd5b6110ea81610cf0565b600860006101000a81548167ffffffffffffffff021916908367ffffffffffffffff160217905550816007819055505050565b60016020528060005260406000206000915090508060010154905081565b60026020528060005260406000206000915090508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060020154908060030154908060040154908060050154908060060154908060070154908060080160009054906101000a90046bffffffffffffffffffffffff1690806009015490508a565b8260026000828152602001908152602001600020600201544210611256576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526022815260200180614b696022913960400191505060405180910390fd5b600061126133610cf0565b90506000805b85518110156113f057600080600061129189858151811061128457fe5b6020026020010151613263565b9250925092508567ffffffffffffffff168367ffffffffffffffff1614611303576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260238152602001806148b06023913960400191505060405180910390fd5b61135089858151811061131257fe5b602002602001015189868151811061132657fe5b6020026020010151600160008e815260200190815260200160002061348c9092919063ffffffff16565b156113e057611376816bffffffffffffffffffffffff168661302490919063ffffffff16565b94508567ffffffffffffffff168a7f7edae327fe79804b2f38bd490d874a0d188d3ae8911b303205abe47400086ac4848460405180836bffffffffffffffffffffffff168152602001826bffffffffffffffffffffffff1681526020019250505060405180910390a35b5050508080600101915050611267565b506114523382600260008a815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166135879092919063ffffffff16565b505050505050565b600860009054906101000a900467ffffffffffffffff1681565b600061149b826001600086815260200190815260200160002061362990919063ffffffff16565b905092915050565b6114ab613484565b73ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161461156b576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a360008060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b60008061163533610cf0565b90506116ae33306116876103e861167961165c6007546103e861302490919063ffffffff16565b8b6bffffffffffffffffffffffff166133fe90919063ffffffff16565b61369290919063ffffffff16565b8b73ffffffffffffffffffffffffffffffffffffffff166136dc909392919063ffffffff16565b60008311611707576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526037815260200180614a206037913960400191505060405180910390fd5b6006600081548092919060010191905055506040518061014001604052808973ffffffffffffffffffffffffffffffffffffffff1681526020018873ffffffffffffffffffffffffffffffffffffffff168152602001874201815260200161177083878961379d565b8152602001848152602001600081526020016000801b81526020016000801b815260200160006bffffffffffffffffffffffff16815260200160075481525060026000600654815260200190815260200160002060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060408201518160020155606082015181600301556080820151816004015560a0820151816005015560c0820151816006015560e082015181600701556101008201518160080160006101000a8154816bffffffffffffffffffffffff02191690836bffffffffffffffffffffffff16021790555061012082015181600901559050508673ffffffffffffffffffffffffffffffffffffffff168873ffffffffffffffffffffffffffffffffffffffff166006547f15dd9639accd24fcb10b44fe33886ce03e228e4e6ba1f65791edf66fa4acfa0360405160405180910390a46006549150509695505050505050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60065481565b600080846000801b60026000838152602001908152602001600020600701541415611a03576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260188152602001807f41756374696f6e206e6f74207965742066696e6973686564000000000000000081525060200191505060405180910390fd5b611a0b614819565b60026000888152602001908152602001600020604051806101400160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016002820154815260200160038201548152602001600482015481526020016005820154815260200160068201548152602001600782015481526020016008820160009054906101000a90046bffffffffffffffffffffffff166bffffffffffffffffffffffff166bffffffffffffffffffffffff1681526020016009820154815250509050600080611b6c8360e00151613263565b92509250506000611b9089600081518110611b8357fe5b6020026020010151613263565b5050905060005b8951811015611ef957611bed8a8281518110611baf57fe5b60200260200101518a8381518110611bc357fe5b6020026020010151600160008f815260200190815260200160002061348c9092919063ffffffff16565b611c5f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601c8152602001807f6f72646572206973206e6f206c6f6e67657220636c61696d61626c650000000081525060200191505060405180910390fd5b6000806000611c808d8581518110611c7357fe5b6020026020010151613263565b9250925092508467ffffffffffffffff168367ffffffffffffffff1614611cf2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526023815260200180614a9e6023913960400191505060405180910390fd5b8760e001518d8581518110611d0357fe5b60200260200101511415611dc657611d77611d68876bffffffffffffffffffffffff16611d5a8a6bffffffffffffffffffffffff168c61010001516bffffffffffffffffffffffff166133fe90919063ffffffff16565b61369290919063ffffffff16565b8c61302490919063ffffffff16565b9a50611dbf611db08961010001516bffffffffffffffffffffffff16836bffffffffffffffffffffffff16612cb490919063ffffffff16565b8b61302490919063ffffffff16565b9950611e82565b611df08860e001518e8681518110611dda57fe5b602002602001015161380090919063ffffffff16565b15611e5d57611e56611e47876bffffffffffffffffffffffff16611e398a6bffffffffffffffffffffffff16856bffffffffffffffffffffffff166133fe90919063ffffffff16565b61369290919063ffffffff16565b8c61302490919063ffffffff16565b9a50611e81565b611e7e816bffffffffffffffffffffffff168b61302490919063ffffffff16565b99505b5b8467ffffffffffffffff168e7f3f2c83616e48a2f8b3c9cc26499e2e5c61643714dac49027d82cf6732f96a91a848460405180836bffffffffffffffffffffffff168152602001826bffffffffffffffffffffffff1681526020019250505060405180910390a35050508080600101915050611b97565b50611f068a8888846139b8565b5050505050935093915050565b60008460026000828152602001908152602001600020600201544210611f84576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526022815260200180614b696022913960400191505060405180910390fd5b600080611fa6600260008a815260200190815260200160002060030154613263565b92509250506000611fb633610cf0565b945060005b885181101561229057612006888281518110611fd357fe5b60200260200101516bffffffffffffffffffffffff16846bffffffffffffffffffffffff166133fe90919063ffffffff16565b612048856bffffffffffffffffffffffff168b848151811061202457fe5b60200260200101516bffffffffffffffffffffffff166133fe90919063ffffffff16565b1061209e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526029815260200180614b166029913960400191505060405180910390fd5b600260008b8152602001908152602001600020600401548982815181106120c157fe5b60200260200101516bffffffffffffffffffffffff161161214a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600f8152602001807f6f7264657220746f6f20736d616c6c000000000000000000000000000000000081525060200191505060405180910390fd5b60006121b6612180888c858151811061215f57fe5b60200260200101518c868151811061217357fe5b602002602001015161379d565b89848151811061218c57fe5b6020026020010151600160008f8152602001908152602001600020613aad9092919063ffffffff16565b90508015612282576121f28983815181106121cd57fe5b60200260200101516bffffffffffffffffffffffff168461302490919063ffffffff16565b92508667ffffffffffffffff168b7f9304f2fc7ed6d42c0400e678dbc7283e1e9054889c3afea5f965adff66ef9eac8c858151811061222d57fe5b60200260200101518c868151811061224157fe5b602002602001015160405180836bffffffffffffffffffffffff168152602001826bffffffffffffffffffffffff1681526020019250505060405180910390a35b508080600101915050611fbb565b506122f4333083600260008e815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166136dc909392919063ffffffff16565b50505050949350505050565b6103e881565b60075481565b612314613484565b73ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146123d4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141561245a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260268152602001806148d36026913960400191505060405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b8160026000828152602001908152602001600020600201544211801561255557506000801b6002600083815260200190815260200160002060070154145b6125aa576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526028815260200180614ac16028913960400191505060405180910390fd5b6000806125b684613263565b925092505060008060006125df600260008a815260200190815260200160002060030154613263565b9250925092506000856bffffffffffffffffffffffff1611612669576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260158152602001807f7072696365206d75737420626520706f7374697665000000000000000000000081525060200191505060405180910390fd5b6000600260008a81526020019081526020016000206005015490506000600260008b81526020019081526020016000206006015490506000801b8114156126b257600160001b90505b6000600160008c815260200190815260200160002060010154111561277d576126f681600160008d81526020019081526020016000206132f190919063ffffffff16565b90505b8881141580156127185750612717898261380090919063ffffffff16565b5b1561277c57600061272882613263565b9250505061274d816bffffffffffffffffffffffff168461302490919063ffffffff16565b925061277482600160008e81526020019081526020016000206132f190919063ffffffff16565b9150506126f9565b5b60006127c0876bffffffffffffffffffffffff166127b28a6bffffffffffffffffffffffff16866133fe90919063ffffffff16565b61369290919063ffffffff16565b9050818a14156129775760006127d583613263565b9250505060006127fc83876bffffffffffffffffffffffff16612cb490919063ffffffff16565b90506128476128428b6bffffffffffffffffffffffff166128348c6bffffffffffffffffffffffff16856133fe90919063ffffffff16565b61369290919063ffffffff16565b6130ac565b67ffffffffffffffff16600260008f815260200190815260200160002060080160006101000a8154816bffffffffffffffffffffffff02191690836bffffffffffffffffffffffff160217905550816bffffffffffffffffffffffff16600260008f815260200190815260200160002060080160009054906101000a90046bffffffffffffffffffffffff166bffffffffffffffffffffffff161115612955576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601f8152602001807f6f726465722063616e206e6f7420626520636c656172696e67206f726465720081525060200191505060405180910390fd5b83600260008f8152602001908152602001600020600701819055505050612c17565b836bffffffffffffffffffffffff16811015612ac2576129bc876bffffffffffffffffffffffff16856bffffffffffffffffffffffff166133fe90919063ffffffff16565b6129eb866bffffffffffffffffffffffff168a6bffffffffffffffffffffffff166133fe90919063ffffffff16565b14612a41576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260308152602001806148f96030913960400191505060405180910390fd5b612a4a816130ac565b67ffffffffffffffff16600260008d815260200190815260200160002060080160006101000a8154816bffffffffffffffffffffffff02191690836bffffffffffffffffffffffff160217905550612aa386898961379d565b600260008d815260200190815260200160002060070181905550612c16565b89600260008d815260200190815260200160002060070181905550836bffffffffffffffffffffffff168114612b60576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601b8152602001807f7072696365206973206e6f7420636c656172696e67207072696365000000000081525060200191505060405180910390fd5b612b8f876bffffffffffffffffffffffff16856bffffffffffffffffffffffff166133fe90919063ffffffff16565b612bbe866bffffffffffffffffffffffff168a6bffffffffffffffffffffffff166133fe90919063ffffffff16565b1115612c15576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260318152602001806149c56031913960400191505060405180910390fd5b5b5b8a7f8e633245b93c41d24c82377f869edd0ac49ea9084bb0fa0265125a7b1df7fc95898960405180836bffffffffffffffffffffffff168152602001826bffffffffffffffffffffffff1681526020019250505060405180910390a26000600260008d8152602001908152602001600020600901541115612c9c57612c9b8b613d3e565b5b612ca58b613f8a565b50505050505050505050505050565b6000612cf683836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f7700008152506141ab565b905092915050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415612da2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601a8152602001807f43616e6e6f7420696e73657274207a65726f206164647265737300000000000081525060200191505060405180910390fd5b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff67ffffffffffffffff168367ffffffffffffffff161415612e4c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260188152602001807f43616e6e6f7420696e73657274206d61782075696e743634000000000000000081525060200191505060405180910390fd5b60008460010160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900467ffffffffffffffff1667ffffffffffffffff16141580612f345750600073ffffffffffffffffffffffffffffffffffffffff168460000160006001860167ffffffffffffffff1667ffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614155b15612f42576000905061301d565b818460000160006001860167ffffffffffffffff1667ffffffffffffffff16815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600183018460010160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548167ffffffffffffffff021916908367ffffffffffffffff160217905550600190505b9392505050565b6000808284019050838110156130a2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601b8152602001807f536166654d6174683a206164646974696f6e206f766572666c6f77000000000081525060200191505060405180910390fd5b8091505092915050565b600068010000000000000000821061310f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526026815260200180614a786026913960400191505060405180910390fd5b819050919050565b6000808360010160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900467ffffffffffffffff1667ffffffffffffffff161415905092915050565b60006131908383613117565b613202576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601b8152602001807f4d7573742068617665204164647265737320746f20676574204944000000000081525060200191505060405180910390fd5b60018360010160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900467ffffffffffffffff1603905092915050565b600080600078010000000000000000000000000000000000000000000000008460001c8161328d57fe5b0492506c0100000000000000000000000078010000000000000000000000000000000000000000000000008560001c816132c357fe5b06816132cb57fe5b0491506c010000000000000000000000008460001c816132e757fe5b0690509193909250565b60007fffffffffffffffffffffffffffffffffffffffff00000000000000000000000160001b82141561336f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602a8152602001806149f6602a913960400191505060405180910390fd5b6000801b8360000160008481526020019081526020016000205414156133e0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260228152602001806149296022913960400191505060405180910390fd5b82600001600083815260200190815260200160002054905092915050565b600080831415613411576000905061347e565b600082840290508284828161342257fe5b0414613479576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526021815260200180614a576021913960400191505060405180910390fd5b809150505b92915050565b600033905090565b60006134988484613629565b6134a55760009050613580565b60008290505b838560000160008381526020019081526020016000205414613519577fffffffffffffffffffffffffffffffffffffffff00000000000000000000000160001b8114156134fc576000915050613580565b8460000160008281526020019081526020016000205490506134ab565b84600001600085815260200190815260200160002054856000016000838152602001908152602001600020819055506000801b8560000160008681526020019081526020016000208190555084600101600081548092919060019003919050555060019150505b9392505050565b6136248363a9059cbb60e01b8484604051602401808373ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505061426b565b505050565b6000600160001b82148061365f57507fffffffffffffffffffffffffffffffffffffffff00000000000000000000000160001b82145b1561366d576000905061368c565b6000801b83600001600084815260200190815260200160002054141590505b92915050565b60006136d483836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f00000000000081525061435a565b905092915050565b613797846323b872dd60e01b858585604051602401808473ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019350505050604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505061426b565b50505050565b6000816bffffffffffffffffffffffff166c01000000000000000000000000846bffffffffffffffffffffffff160278010000000000000000000000000000000000000000000000008667ffffffffffffffff1602010160001b90509392505050565b60008060008061380f86613263565b925092509250600080600061382388613263565b925092509250613858846bffffffffffffffffffffffff16836bffffffffffffffffffffffff166133fe90919063ffffffff16565b613887826bffffffffffffffffffffffff16876bffffffffffffffffffffffff166133fe90919063ffffffff16565b101561389c57600196505050505050506139b2565b6138cb846bffffffffffffffffffffffff16836bffffffffffffffffffffffff166133fe90919063ffffffff16565b6138fa826bffffffffffffffffffffffff16876bffffffffffffffffffffffff166133fe90919063ffffffff16565b111561390f57600096505050505050506139b2565b8267ffffffffffffffff168667ffffffffffffffff16141561397c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602d815260200180614ae9602d913960400191505060405180910390fd5b8267ffffffffffffffff168667ffffffffffffffff1610156139a757600196505050505050506139b2565b600096505050505050505b92915050565b60006139ce82600361442090919063ffffffff16565b90506000841115613a3b57613a3a81856002600089815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166135879092919063ffffffff16565b5b6000831115613aa657613aa581846002600089815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166135879092919063ffffffff16565b5b5050505050565b600080613ab984613263565b9250505060006bffffffffffffffffffffffff16816bffffffffffffffffffffffff161415613b50576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601f8152602001807f496e73657274696e67207a65726f206973206e6f7420737570706f727465640081525060200191505060405180910390fd5b613b5a8585613629565b15613b69576000915050613d37565b60008086600101541415613bd75784866000016000600160001b8152602001908152602001600020819055507fffffffffffffffffffffffffffffffffffffffff00000000000000000000000160001b86600001600087815260200190815260200160002081905550613d1c565b600160001b841480613bef5750613bee8685613629565b5b613c44576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602781526020018061499e6027913960400191505060405180910390fd5b60008490505b81613d1a57613c62868261380090919063ffffffff16565b15613d0957613c8f868860000160008481526020019081526020016000205461380090919063ffffffff16565b613ceb576000876000016000838152602001908152602001600020549050868860000160008481526020019081526020016000208190555080886000016000898152602001908152602001600020819055506001925050613d04565b8660000160008281526020019081526020016000205490505b613d15565b60009350505050613d37565b613c4a565b505b85600101600081548092919060010191905055506001925050505b9392505050565b6000806000613d626002600086815260200190815260200160002060030154613263565b925092509250600080613d8a6002600088815260200190815260200160002060070154613263565b92509250506000613ddc6103e8613dce600260008b815260200190815260200160002060090154876bffffffffffffffffffffffff166133fe90919063ffffffff16565b61369290919063ffffffff16565b9050613e0d846bffffffffffffffffffffffff16836bffffffffffffffffffffffff166133fe90919063ffffffff16565b613e3c866bffffffffffffffffffffffff16856bffffffffffffffffffffffff166133fe90919063ffffffff16565b1415613f5d576000613ea1600260008a815260200190815260200160002060080160009054906101000a90046bffffffffffffffffffffffff166bffffffffffffffffffffffff16866bffffffffffffffffffffffff16612cb490919063ffffffff16565b9050613ef888613eda876bffffffffffffffffffffffff16613ecc85876133fe90919063ffffffff16565b61369290919063ffffffff16565b6000600860009054906101000a900467ffffffffffffffff166139b8565b613f5788613f4f876bffffffffffffffffffffffff16613f41613f32868b6bffffffffffffffffffffffff16612cb490919063ffffffff16565b876133fe90919063ffffffff16565b61369290919063ffffffff16565b60008a6139b8565b50613f81565b613f8087826000600860009054906101000a900467ffffffffffffffff166139b8565b5b50505050505050565b6000806000806000613fb16002600088815260200190815260200160002060030154613263565b9250925092506000801b6002600088815260200190815260200160002060030181905550600080613ff7600260008a815260200190815260200160002060070154613263565b925092505061402b836bffffffffffffffffffffffff16826bffffffffffffffffffffffff166133fe90919063ffffffff16565b61405a856bffffffffffffffffffffffff16846bffffffffffffffffffffffff166133fe90919063ffffffff16565b1415614143576140bd600260008a815260200190815260200160002060080160009054906101000a90046bffffffffffffffffffffffff166bffffffffffffffffffffffff16846bffffffffffffffffffffffff16612cb490919063ffffffff16565b965061413c826bffffffffffffffffffffffff1661412e836bffffffffffffffffffffffff16600260008d815260200190815260200160002060080160009054906101000a90046bffffffffffffffffffffffff166bffffffffffffffffffffffff166133fe90919063ffffffff16565b61369290919063ffffffff16565b9550614195565b614192826bffffffffffffffffffffffff16614184836bffffffffffffffffffffffff16866bffffffffffffffffffffffff166133fe90919063ffffffff16565b61369290919063ffffffff16565b95505b6141a1888888886139b8565b5050505050915091565b6000838311158290614258576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561421d578082015181840152602081019050614202565b50505050905090810190601f16801561424a5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b5060008385039050809150509392505050565b60606142cd826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff166144f39092919063ffffffff16565b9050600081511115614355578080602001905160208110156142ee57600080fd5b8101908080519060200190929190505050614354576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602a815260200180614b3f602a913960400191505060405180910390fd5b5b505050565b60008083118290614406576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b838110156143cb5780820151818401526020810190506143b0565b50505050905090810190601f1680156143f85780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b50600083858161441257fe5b049050809150509392505050565b600061442c838361450b565b61449e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601b8152602001807f4d757374206861766520494420746f206765742041646472657373000000000081525060200191505060405180910390fd5b8260000160006001840167ffffffffffffffff1667ffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905092915050565b60606145028484600085614591565b90509392505050565b60008073ffffffffffffffffffffffffffffffffffffffff168360000160006001850167ffffffffffffffff1667ffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415905092915050565b6060824710156145ec576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602681526020018061494b6026913960400191505060405180910390fd5b6145f58561473a565b614667576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601d8152602001807f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000081525060200191505060405180910390fd5b600060608673ffffffffffffffffffffffffffffffffffffffff1685876040518082805190602001908083835b602083106146b75780518252602082019150602081019050602083039250614694565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d8060008114614719576040519150601f19603f3d011682016040523d82523d6000602084013e61471e565b606091505b509150915061472e82828661474d565b92505050949350505050565b600080823b905060008111915050919050565b6060831561475d57829050614812565b6000835111156147705782518084602001fd5b816040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b838110156147d75780820151818401526020810190506147bc565b50505050905090810190601f1680156148045780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b9392505050565b604051806101400160405280600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff16815260200160008152602001600080191681526020016000815260200160008152602001600080191681526020016000801916815260200160006bffffffffffffffffffffffff16815260200160008152509056fe4f6e6c792074686520757365722063616e2063616e63656c20686973206f72646572734f776e61626c653a206e6577206f776e657220697320746865207a65726f2061646472657373737570706c696564207072696365206d75737420626520696e766572736520696e697469616c4f726465724c696d6974547279696e6720746f20676574206e657874206f66206c61737420656c656d656e74416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c6c466565206973206e6f7420616c6c6f77656420746f2062652073657420686967686572207468616e20312e3525656c656d656e744265666f72654e65774f6e65206d7573742062652076616c6964206f72646572636c656172696e6720707269636520697320626574746572207468616e20696e697469616c41756374696f6e4f72646572547279696e6720746f20676574206e657874206f66206e6f6e2d6578697374656e7420656c656d656e746d696e696d756d50617274696369706174696f6e427579416d6f756e74206973206e6f7420616c6c6f77656420746f206265207a65726f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f7753616665436173743a2076616c756520646f65736e27742066697420696e20363420626974736f6e6c7920616c6c6f77656420746f20636c61696d20666f722073616d65207573657241756374696f6e206e6f7420696e20736f6c7574696f6e207375626d697373696f6e20706861736575736572206973206e6f7420616c6c6f77656420746f20706c6163652073616d65206f726465722074776963656c696d6974207072696365206e6f7420626574746572207468616e206d696d696d616c206f666665725361666545524332303a204552433230206f7065726174696f6e20646964206e6f7420737563636565646e6f206c6f6e67657220696e206f7264657220706c6163656d656e74207068617365a264697066735822122087648d3101dce68dec4f4429a181f251fd6de6f17bd45a5dd7cb4737d6bf1ba164736f6c634300060c0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 30,
        "contract": "contracts/EasyAuction.sol:EasyAuction",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 1424,
        "contract": "contracts/EasyAuction.sol:EasyAuction",
        "label": "sellOrders",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_uint256,t_struct(Data)2906_storage)"
      },
      {
        "astId": 1428,
        "contract": "contracts/EasyAuction.sol:EasyAuction",
        "label": "auctionData",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_struct(AuctionData)1420_storage)"
      },
      {
        "astId": 1430,
        "contract": "contracts/EasyAuction.sol:EasyAuction",
        "label": "registeredUsers",
        "offset": 0,
        "slot": "3",
        "type": "t_struct(Data)2717_storage"
      },
      {
        "astId": 1432,
        "contract": "contracts/EasyAuction.sol:EasyAuction",
        "label": "numUsers",
        "offset": 0,
        "slot": "5",
        "type": "t_uint64"
      },
      {
        "astId": 1434,
        "contract": "contracts/EasyAuction.sol:EasyAuction",
        "label": "auctionCounter",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 1443,
        "contract": "contracts/EasyAuction.sol:EasyAuction",
        "label": "feeNumerator",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 1449,
        "contract": "contracts/EasyAuction.sol:EasyAuction",
        "label": "feeReceiverUserId",
        "offset": 0,
        "slot": "8",
        "type": "t_uint64"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IERC20)478": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint64)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint64)",
        "numberOfBytes": "32",
        "value": "t_uint64"
      },
      "t_mapping(t_bytes32,t_bytes32)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => bytes32)",
        "numberOfBytes": "32",
        "value": "t_bytes32"
      },
      "t_mapping(t_uint256,t_struct(AuctionData)1420_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct EasyAuction.AuctionData)",
        "numberOfBytes": "32",
        "value": "t_struct(AuctionData)1420_storage"
      },
      "t_mapping(t_uint256,t_struct(Data)2906_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct IterableOrderedOrderSet.Data)",
        "numberOfBytes": "32",
        "value": "t_struct(Data)2906_storage"
      },
      "t_mapping(t_uint64,t_address)": {
        "encoding": "mapping",
        "key": "t_uint64",
        "label": "mapping(uint64 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_struct(AuctionData)1420_storage": {
        "encoding": "inplace",
        "label": "struct EasyAuction.AuctionData",
        "members": [
          {
            "astId": 1401,
            "contract": "contracts/EasyAuction.sol:EasyAuction",
            "label": "sellToken",
            "offset": 0,
            "slot": "0",
            "type": "t_contract(IERC20)478"
          },
          {
            "astId": 1403,
            "contract": "contracts/EasyAuction.sol:EasyAuction",
            "label": "buyToken",
            "offset": 0,
            "slot": "1",
            "type": "t_contract(IERC20)478"
          },
          {
            "astId": 1405,
            "contract": "contracts/EasyAuction.sol:EasyAuction",
            "label": "auctionEndDate",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 1407,
            "contract": "contracts/EasyAuction.sol:EasyAuction",
            "label": "initialAuctionOrder",
            "offset": 0,
            "slot": "3",
            "type": "t_bytes32"
          },
          {
            "astId": 1409,
            "contract": "contracts/EasyAuction.sol:EasyAuction",
            "label": "minimumParticipationBuyAmount",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 1411,
            "contract": "contracts/EasyAuction.sol:EasyAuction",
            "label": "interimSellAmountSum",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 1413,
            "contract": "contracts/EasyAuction.sol:EasyAuction",
            "label": "interimOrder",
            "offset": 0,
            "slot": "6",
            "type": "t_bytes32"
          },
          {
            "astId": 1415,
            "contract": "contracts/EasyAuction.sol:EasyAuction",
            "label": "clearingPriceOrder",
            "offset": 0,
            "slot": "7",
            "type": "t_bytes32"
          },
          {
            "astId": 1417,
            "contract": "contracts/EasyAuction.sol:EasyAuction",
            "label": "volumeClearingPriceOrder",
            "offset": 0,
            "slot": "8",
            "type": "t_uint96"
          },
          {
            "astId": 1419,
            "contract": "contracts/EasyAuction.sol:EasyAuction",
            "label": "feeNumerator",
            "offset": 0,
            "slot": "9",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "320"
      },
      "t_struct(Data)2717_storage": {
        "encoding": "inplace",
        "label": "struct IdToAddressBiMap.Data",
        "members": [
          {
            "astId": 2712,
            "contract": "contracts/EasyAuction.sol:EasyAuction",
            "label": "idToAddress",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_uint64,t_address)"
          },
          {
            "astId": 2716,
            "contract": "contracts/EasyAuction.sol:EasyAuction",
            "label": "addressToId",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_address,t_uint64)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Data)2906_storage": {
        "encoding": "inplace",
        "label": "struct IterableOrderedOrderSet.Data",
        "members": [
          {
            "astId": 2903,
            "contract": "contracts/EasyAuction.sol:EasyAuction",
            "label": "nextMap",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_bytes32,t_bytes32)"
          },
          {
            "astId": 2905,
            "contract": "contracts/EasyAuction.sol:EasyAuction",
            "label": "size",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      },
      "t_uint96": {
        "encoding": "inplace",
        "label": "uint96",
        "numberOfBytes": "12"
      }
    }
  }
}