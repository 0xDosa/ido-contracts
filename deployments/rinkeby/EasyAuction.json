{
  "address": "0xAD4bC59C3E45B9C588798e7002519dbA66b29913",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "auctionId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint96",
          "name": "priceNumerator",
          "type": "uint96"
        },
        {
          "indexed": false,
          "internalType": "uint96",
          "name": "priceDenominator",
          "type": "uint96"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "rewardFactor",
          "type": "uint256"
        }
      ],
      "name": "AuctionCleared",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "auctionId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint64",
          "name": "userId",
          "type": "uint64"
        },
        {
          "indexed": false,
          "internalType": "uint96",
          "name": "sellAmount",
          "type": "uint96"
        },
        {
          "indexed": false,
          "internalType": "uint96",
          "name": "buyAmount",
          "type": "uint96"
        }
      ],
      "name": "CancellationSellOrders",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "auctionId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "contract ERC20",
          "name": "_sellToken",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "contract ERC20",
          "name": "_buyToken",
          "type": "address"
        }
      ],
      "name": "NewAuction",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "auctionId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint64",
          "name": "userId",
          "type": "uint64"
        },
        {
          "indexed": false,
          "internalType": "uint96",
          "name": "buyAmount",
          "type": "uint96"
        },
        {
          "indexed": false,
          "internalType": "uint96",
          "name": "sellAmount",
          "type": "uint96"
        }
      ],
      "name": "NewSellOrder",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "userId",
          "type": "uint64"
        }
      ],
      "name": "UserRegistration",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "auctionCounter",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "auctionData",
      "outputs": [
        {
          "internalType": "contract ERC20",
          "name": "sellToken",
          "type": "address"
        },
        {
          "internalType": "contract ERC20",
          "name": "buyToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "auctionEndDate",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "initialAuctionOrder",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "clearingPriceOrder",
          "type": "bytes32"
        },
        {
          "internalType": "uint96",
          "name": "volumeClearingPriceOrder",
          "type": "uint96"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "auctionId",
          "type": "uint256"
        },
        {
          "internalType": "bytes32[]",
          "name": "_sellOrders",
          "type": "bytes32[]"
        },
        {
          "internalType": "bytes32[]",
          "name": "_prevSellOrders",
          "type": "bytes32[]"
        }
      ],
      "name": "cancelSellOrders",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "auctionId",
          "type": "uint256"
        },
        {
          "internalType": "bytes32[]",
          "name": "orders",
          "type": "bytes32[]"
        },
        {
          "internalType": "bytes32[]",
          "name": "previousOrders",
          "type": "bytes32[]"
        }
      ],
      "name": "claimFromParticipantOrder",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "sellTokenAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "buyTokenAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "auctionId",
          "type": "uint256"
        }
      ],
      "name": "getSecondsRemainingInBatch",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "getUserId",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "userId",
          "type": "uint64"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract ERC20",
          "name": "_sellToken",
          "type": "address"
        },
        {
          "internalType": "contract ERC20",
          "name": "_buyToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "duration",
          "type": "uint256"
        },
        {
          "internalType": "uint96",
          "name": "_sellAmount",
          "type": "uint96"
        },
        {
          "internalType": "uint96",
          "name": "_minBuyAmount",
          "type": "uint96"
        }
      ],
      "name": "initiateAuction",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "numUsers",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "auctionId",
          "type": "uint256"
        },
        {
          "internalType": "uint96[]",
          "name": "_minBuyAmounts",
          "type": "uint96[]"
        },
        {
          "internalType": "uint96[]",
          "name": "_sellAmounts",
          "type": "uint96[]"
        },
        {
          "internalType": "bytes32[]",
          "name": "_prevSellOrders",
          "type": "bytes32[]"
        }
      ],
      "name": "placeSellOrders",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "registerUser",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "userId",
          "type": "uint64"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "sellOrders",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "size",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "auctionId",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "price",
          "type": "bytes32"
        }
      ],
      "name": "verifyPrice",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x0c043dcf6a6b42b9a20bc98a4dbd6772ae6e83970750f0426c42913503f9860d",
  "receipt": {
    "to": "0x4e59b44847b379578588920cA78FbF26c0B4956C",
    "from": "0x740a98F8f4fAe0986FB3264Fe4aaCf94ac1EE96f",
    "contractAddress": null,
    "transactionIndex": 9,
    "gasUsed": "3373640",
    "logsBloom": "0x
    "blockHash": "0x00e22717efdb2a27f5d12c9f9e92940be73229ea8708cc9c140693d4e84f6b83",
    "transactionHash": "0x0c043dcf6a6b42b9a20bc98a4dbd6772ae6e83970750f0426c42913503f9860d",
    "logs": [],
    "blockNumber": 7668568,
    "cumulativeGasUsed": "4348707",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "0fab4188d886834ac2f17a4b35b0ccd1",
  "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"auctionId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint96\",\"name\":\"priceNumerator\",\"type\":\"uint96\"},{\"indexed\":false,\"internalType\":\"uint96\",\"name\":\"priceDenominator\",\"type\":\"uint96\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewardFactor\",\"type\":\"uint256\"}],\"name\":\"AuctionCleared\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"auctionId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"userId\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"uint96\",\"name\":\"sellAmount\",\"type\":\"uint96\"},{\"indexed\":false,\"internalType\":\"uint96\",\"name\":\"buyAmount\",\"type\":\"uint96\"}],\"name\":\"CancellationSellOrders\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"auctionId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"contract ERC20\",\"name\":\"_sellToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"contract ERC20\",\"name\":\"_buyToken\",\"type\":\"address\"}],\"name\":\"NewAuction\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"auctionId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"userId\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"uint96\",\"name\":\"buyAmount\",\"type\":\"uint96\"},{\"indexed\":false,\"internalType\":\"uint96\",\"name\":\"sellAmount\",\"type\":\"uint96\"}],\"name\":\"NewSellOrder\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"userId\",\"type\":\"uint64\"}],\"name\":\"UserRegistration\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"auctionCounter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"auctionData\",\"outputs\":[{\"internalType\":\"contract ERC20\",\"name\":\"sellToken\",\"type\":\"address\"},{\"internalType\":\"contract ERC20\",\"name\":\"buyToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"auctionEndDate\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"initialAuctionOrder\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"clearingPriceOrder\",\"type\":\"bytes32\"},{\"internalType\":\"uint96\",\"name\":\"volumeClearingPriceOrder\",\"type\":\"uint96\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"auctionId\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"_sellOrders\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"_prevSellOrders\",\"type\":\"bytes32[]\"}],\"name\":\"cancelSellOrders\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"auctionId\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"orders\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"previousOrders\",\"type\":\"bytes32[]\"}],\"name\":\"claimFromParticipantOrder\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"sellTokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"buyTokenAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"auctionId\",\"type\":\"uint256\"}],\"name\":\"getSecondsRemainingInBatch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getUserId\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"userId\",\"type\":\"uint64\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ERC20\",\"name\":\"_sellToken\",\"type\":\"address\"},{\"internalType\":\"contract ERC20\",\"name\":\"_buyToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"uint96\",\"name\":\"_sellAmount\",\"type\":\"uint96\"},{\"internalType\":\"uint96\",\"name\":\"_minBuyAmount\",\"type\":\"uint96\"}],\"name\":\"initiateAuction\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numUsers\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"auctionId\",\"type\":\"uint256\"},{\"internalType\":\"uint96[]\",\"name\":\"_minBuyAmounts\",\"type\":\"uint96[]\"},{\"internalType\":\"uint96[]\",\"name\":\"_sellAmounts\",\"type\":\"uint96[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"_prevSellOrders\",\"type\":\"bytes32[]\"}],\"name\":\"placeSellOrders\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"registerUser\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"userId\",\"type\":\"uint64\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"sellOrders\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"size\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"auctionId\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"price\",\"type\":\"bytes32\"}],\"name\":\"verifyPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/EasyAuction.sol\":\"EasyAuction\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/GSN/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xdb26cbf4d028490f49831a7865c2fe1b28db44b535ca8d343785a3b768aae183\",\"license\":\"MIT\"},\"@openzeppelin/contracts/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow, so we distribute\\n        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\\n    }\\n}\\n\",\"keccak256\":\"0x6c234834003dfb86e2c23d12dfdde7cc01e78013d71b52162cb308b4873562cb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0x9a9cf02622cd7a64261b10534fc3260449da25c98c9e96d1b4ae8110a20e5806\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\nimport \\\"../../GSN/Context.sol\\\";\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    mapping (address => uint256) private _balances;\\n\\n    mapping (address => mapping (address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n    uint8 private _decimals;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\\n     * a default value of 18.\\n     *\\n     * To select a different value for {decimals}, use {_setupDecimals}.\\n     *\\n     * All three of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor (string memory name, string memory symbol) public {\\n        _name = name;\\n        _symbol = symbol;\\n        _decimals = 18;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\\n     * called.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20};\\n     *\\n     * Requirements:\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \\\"ERC20: transfer amount exceeds allowance\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \\\"ERC20: decreased allowance below zero\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\n     *\\n     * This is internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        _balances[sender] = _balances[sender].sub(amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        _balances[recipient] = _balances[recipient].add(amount);\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements\\n     *\\n     * - `to` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply = _totalSupply.add(amount);\\n        _balances[account] = _balances[account].add(amount);\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        _balances[account] = _balances[account].sub(amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        _totalSupply = _totalSupply.sub(amount);\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Sets {decimals} to a value other than the default one of 18.\\n     *\\n     * WARNING: This function should only be called from the constructor. Most\\n     * applications that interact with token contracts will not expect\\n     * {decimals} to ever change, and may work incorrectly if it does.\\n     */\\n    function _setupDecimals(uint8 decimals_) internal {\\n        _decimals = decimals_;\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be to transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\\n}\\n\",\"keccak256\":\"0x91e0bd6a6762d2a1700dab0849de8422611355100576c4beef1e80d82a4104a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x5c26b39d26f7ed489e555d955dcd3e01872972e71fdd1528e93ec164e4f23385\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.2;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies in extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return _functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        return _functionCallWithValue(target, data, value, errorMessage);\\n    }\\n\\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf5fa8cbdffa5ef8be49b246b5628facc30b71707e78a45d80d93b64eff3fe390\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/SafeCast.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n\\n/**\\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\\n * checks.\\n *\\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\\n * easily result in undesired exploitation or bugs, since developers usually\\n * assume that overflows raise errors. `SafeCast` restores this intuition by\\n * reverting the transaction when such an operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n *\\n * Can be combined with {SafeMath} and {SignedSafeMath} to extend it to smaller types, by performing\\n * all math on `uint256` and `int256` and then downcasting.\\n */\\nlibrary SafeCast {\\n\\n    /**\\n     * @dev Returns the downcasted uint128 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint128).\\n     *\\n     * Counterpart to Solidity's `uint128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     */\\n    function toUint128(uint256 value) internal pure returns (uint128) {\\n        require(value < 2**128, \\\"SafeCast: value doesn\\\\'t fit in 128 bits\\\");\\n        return uint128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint64 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint64).\\n     *\\n     * Counterpart to Solidity's `uint64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     */\\n    function toUint64(uint256 value) internal pure returns (uint64) {\\n        require(value < 2**64, \\\"SafeCast: value doesn\\\\'t fit in 64 bits\\\");\\n        return uint64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint32 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint32).\\n     *\\n     * Counterpart to Solidity's `uint32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     */\\n    function toUint32(uint256 value) internal pure returns (uint32) {\\n        require(value < 2**32, \\\"SafeCast: value doesn\\\\'t fit in 32 bits\\\");\\n        return uint32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint16 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint16).\\n     *\\n     * Counterpart to Solidity's `uint16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     */\\n    function toUint16(uint256 value) internal pure returns (uint16) {\\n        require(value < 2**16, \\\"SafeCast: value doesn\\\\'t fit in 16 bits\\\");\\n        return uint16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint8 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint8).\\n     *\\n     * Counterpart to Solidity's `uint8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits.\\n     */\\n    function toUint8(uint256 value) internal pure returns (uint8) {\\n        require(value < 2**8, \\\"SafeCast: value doesn\\\\'t fit in 8 bits\\\");\\n        return uint8(value);\\n    }\\n\\n    /**\\n     * @dev Converts a signed int256 into an unsigned uint256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be greater than or equal to 0.\\n     */\\n    function toUint256(int256 value) internal pure returns (uint256) {\\n        require(value >= 0, \\\"SafeCast: value must be positive\\\");\\n        return uint256(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int128 from int256, reverting on\\n     * overflow (when the input is less than smallest int128 or\\n     * greater than largest int128).\\n     *\\n     * Counterpart to Solidity's `int128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt128(int256 value) internal pure returns (int128) {\\n        require(value >= -2**127 && value < 2**127, \\\"SafeCast: value doesn\\\\'t fit in 128 bits\\\");\\n        return int128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int64 from int256, reverting on\\n     * overflow (when the input is less than smallest int64 or\\n     * greater than largest int64).\\n     *\\n     * Counterpart to Solidity's `int64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt64(int256 value) internal pure returns (int64) {\\n        require(value >= -2**63 && value < 2**63, \\\"SafeCast: value doesn\\\\'t fit in 64 bits\\\");\\n        return int64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int32 from int256, reverting on\\n     * overflow (when the input is less than smallest int32 or\\n     * greater than largest int32).\\n     *\\n     * Counterpart to Solidity's `int32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt32(int256 value) internal pure returns (int32) {\\n        require(value >= -2**31 && value < 2**31, \\\"SafeCast: value doesn\\\\'t fit in 32 bits\\\");\\n        return int32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int16 from int256, reverting on\\n     * overflow (when the input is less than smallest int16 or\\n     * greater than largest int16).\\n     *\\n     * Counterpart to Solidity's `int16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt16(int256 value) internal pure returns (int16) {\\n        require(value >= -2**15 && value < 2**15, \\\"SafeCast: value doesn\\\\'t fit in 16 bits\\\");\\n        return int16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int8 from int256, reverting on\\n     * overflow (when the input is less than smallest int8 or\\n     * greater than largest int8).\\n     *\\n     * Counterpart to Solidity's `int8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt8(int256 value) internal pure returns (int8) {\\n        require(value >= -2**7 && value < 2**7, \\\"SafeCast: value doesn\\\\'t fit in 8 bits\\\");\\n        return int8(value);\\n    }\\n\\n    /**\\n     * @dev Converts an unsigned uint256 into a signed int256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be less than or equal to maxInt256.\\n     */\\n    function toInt256(uint256 value) internal pure returns (int256) {\\n        require(value < 2**255, \\\"SafeCast: value doesn't fit in an int256\\\");\\n        return int256(value);\\n    }\\n}\\n\",\"keccak256\":\"0xf06035c6398edfcb048e31e6cb7f485c203230a037e21b4aad337abd8ee896a3\",\"license\":\"MIT\"},\"contracts/EasyAuction.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-or-newer\\npragma solidity >=0.6.8;\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"./libraries/IterableOrderedOrderSet.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/Math.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"./libraries/IdToAddressBiMap.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/SafeCast.sol\\\";\\n\\ncontract EasyAuction {\\n    using SafeMath for uint64;\\n    using SafeMath for uint96;\\n    using SafeMath for uint256;\\n    using SafeCast for uint256; // Todo actually use safecast\\n    using IterableOrderedOrderSet for IterableOrderedOrderSet.Data;\\n    using IterableOrderedOrderSet for bytes32;\\n    using IdToAddressBiMap for IdToAddressBiMap.Data;\\n\\n    uint256 internal constant MAX_BATCH_SIZE = 5000;\\n\\n    modifier atStageOrderplacement(uint256 auctionId) {\\n        require(\\n            block.timestamp < auctionData[auctionId].auctionEndDate,\\n            \\\"no longer in order placement phase\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier atStageSolutionSubmission(uint256 auctionId) {\\n        require(\\n            block.timestamp > auctionData[auctionId].auctionEndDate &&\\n                auctionData[auctionId].clearingPriceOrder == bytes32(0),\\n            \\\"Auction not in solution submission phase\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier atStageFinished(uint256 auctionId) {\\n        require(\\n            auctionData[auctionId].clearingPriceOrder != bytes32(0),\\n            \\\"Auction not yet finished\\\"\\n        );\\n        _;\\n    }\\n\\n    event NewSellOrder(\\n        uint256 indexed auctionId,\\n        uint64 indexed userId,\\n        uint96 buyAmount,\\n        uint96 sellAmount\\n    );\\n    event CancellationSellOrders(\\n        uint256 indexed auctionId,\\n        uint64 indexed userId,\\n        uint96 sellAmount,\\n        uint96 buyAmount\\n    );\\n    event NewAuction(\\n        uint256 auctionId,\\n        ERC20 indexed _sellToken,\\n        ERC20 indexed _buyToken\\n    );\\n    event AuctionCleared(\\n        uint256 auctionId,\\n        uint96 priceNumerator,\\n        uint96 priceDenominator,\\n        uint256 rewardFactor\\n    );\\n    event UserRegistration(address user, uint64 userId);\\n\\n    struct AuctionData {\\n        ERC20 sellToken;\\n        ERC20 buyToken;\\n        uint256 auctionEndDate;\\n        bytes32 initialAuctionOrder;\\n        bytes32 clearingPriceOrder;\\n        uint96 volumeClearingPriceOrder;\\n    }\\n    mapping(uint256 => IterableOrderedOrderSet.Data) public sellOrders;\\n    mapping(uint256 => AuctionData) public auctionData;\\n    IdToAddressBiMap.Data private registeredUsers;\\n    uint64 public numUsers;\\n    uint256 public auctionCounter;\\n\\n    function initiateAuction(\\n        ERC20 _sellToken,\\n        ERC20 _buyToken,\\n        uint256 duration,\\n        uint96 _sellAmount,\\n        uint96 _minBuyAmount\\n    ) public returns (uint256) {\\n        uint64 userId = getUserId(msg.sender);\\n        require(\\n            _sellToken.transferFrom(msg.sender, address(this), _sellAmount),\\n            \\\"transfer was not successful\\\"\\n        );\\n        auctionCounter++;\\n        auctionData[auctionCounter] = AuctionData(\\n            _sellToken,\\n            _buyToken,\\n            block.timestamp + duration,\\n            IterableOrderedOrderSet.encodeOrder(\\n                userId,\\n                _minBuyAmount,\\n                _sellAmount\\n            ),\\n            bytes32(0),\\n            0\\n        );\\n        emit NewAuction(auctionCounter, _sellToken, _buyToken);\\n        return auctionCounter;\\n    }\\n\\n    function placeSellOrders(\\n        uint256 auctionId,\\n        uint96[] memory _minBuyAmounts,\\n        uint96[] memory _sellAmounts,\\n        bytes32[] memory _prevSellOrders\\n    ) public atStageOrderplacement(auctionId) {\\n        (\\n            ,\\n            uint96 buyAmountOfInitialAuctionOrder,\\n            uint96 sellAmountOfInitialAuctionOrder\\n        ) = auctionData[auctionId].initialAuctionOrder.decodeOrder();\\n        uint256 sumOfSellAmounts = 0;\\n        uint64 userId = getUserId(msg.sender);\\n        for (uint256 i = 0; i < _minBuyAmounts.length; i++) {\\n            require(\\n                _minBuyAmounts[i].mul(buyAmountOfInitialAuctionOrder) <\\n                    sellAmountOfInitialAuctionOrder.mul(_sellAmounts[i]),\\n                \\\"limit price not better than mimimal offer\\\"\\n            );\\n            // small orders can not be allowed to quarantee price calculation\\n            require(\\n                _minBuyAmounts[i] >\\n                    sellAmountOfInitialAuctionOrder / MAX_BATCH_SIZE,\\n                \\\"order too small\\\"\\n            );\\n            bool success =\\n                sellOrders[auctionId].insert(\\n                    IterableOrderedOrderSet.encodeOrder(\\n                        userId,\\n                        _minBuyAmounts[i],\\n                        _sellAmounts[i]\\n                    ),\\n                    _prevSellOrders[i]\\n                );\\n            if (success) {\\n                sumOfSellAmounts = sumOfSellAmounts.add(_sellAmounts[i]);\\n                emit NewSellOrder(\\n                    auctionId,\\n                    userId,\\n                    _minBuyAmounts[i],\\n                    _sellAmounts[i]\\n                );\\n            }\\n        }\\n        require(\\n            auctionData[auctionId].buyToken.transferFrom(\\n                msg.sender,\\n                address(this),\\n                sumOfSellAmounts\\n            ),\\n            \\\"transfer was not successful\\\"\\n        );\\n    }\\n\\n    function cancelSellOrders(\\n        uint256 auctionId,\\n        bytes32[] memory _sellOrders,\\n        bytes32[] memory _prevSellOrders\\n    ) public atStageOrderplacement(auctionId) {\\n        uint64 userId = getUserId(msg.sender);\\n        uint256 claimableAmount = 0;\\n        for (uint256 i = 0; i < _sellOrders.length; i++) {\\n            (\\n                uint64 userIdOfIter,\\n                uint96 buyAmountOfIter,\\n                uint96 sellAmountOfIter\\n            ) = _sellOrders[i].decodeOrder();\\n            require(\\n                userIdOfIter == userId,\\n                \\\"Only the user can cancel his orders\\\"\\n            );\\n            if (\\n                sellOrders[auctionId].remove(_sellOrders[i], _prevSellOrders[i])\\n            ) {\\n                claimableAmount = claimableAmount.add(buyAmountOfIter);\\n                emit CancellationSellOrders(\\n                    auctionId,\\n                    userId,\\n                    buyAmountOfIter,\\n                    sellAmountOfIter\\n                );\\n            }\\n        }\\n        require(\\n            auctionData[auctionId].buyToken.transfer(\\n                msg.sender,\\n                claimableAmount\\n            ),\\n            \\\"transfer was not successful\\\"\\n        );\\n    }\\n\\n    function verifyPrice(uint256 auctionId, bytes32 price)\\n        public\\n        atStageSolutionSubmission(auctionId)\\n    {\\n        (, uint96 priceNumerator, uint96 priceDenominator) =\\n            price.decodeOrder();\\n        (uint64 auctioneerId, uint96 buyAmount, uint96 sellAmount) =\\n            auctionData[auctionId].initialAuctionOrder.decodeOrder();\\n\\n        require(priceNumerator > 0, \\\"price must be postive\\\");\\n\\n        // Calculate the bought volume of auctioneer's sell volume\\n        uint256 sumSellAmount = 0;\\n        bytes32 iterOrder = IterableOrderedOrderSet.QUEUE_START;\\n        if (sellOrders[auctionId].size > 0) {\\n            iterOrder = sellOrders[auctionId].next(iterOrder);\\n\\n            while (iterOrder != price && iterOrder.smallerThan(price)) {\\n                (, , uint96 sellAmountOfIter) = iterOrder.decodeOrder();\\n                sumSellAmount = sumSellAmount.add(sellAmountOfIter);\\n                iterOrder = sellOrders[auctionId].next(iterOrder);\\n            }\\n        }\\n        uint256 sumBuyAmount =\\n            sumSellAmount.mul(priceNumerator).div(priceDenominator);\\n        if (price == iterOrder) {\\n            // case 1: one sellOrder is partically filled\\n            // The partially filled order is the correct one, if:\\n            // 1) The sum of buyAmounts is not bigger than the intitial order sell amount\\n            // i.e, sellAmount >= sumBuyAmount\\n            // 2) The volume of the particial order is not bigger than its sell volume\\n            // i.e. auctionData[auctionId].volumeClearingPriceOrder <= sellAmountOfIter,\\n            (, , uint96 sellAmountOfIter) = iterOrder.decodeOrder();\\n            uint256 clearingOrderBuyAmount = sellAmount.sub(sumBuyAmount);\\n            auctionData[auctionId].volumeClearingPriceOrder = uint96(\\n                clearingOrderBuyAmount.mul(priceDenominator).div(priceNumerator)\\n            );\\n            require(\\n                auctionData[auctionId].volumeClearingPriceOrder <=\\n                    sellAmountOfIter,\\n                \\\"order can not be clearing order\\\"\\n            );\\n            auctionData[auctionId].clearingPriceOrder = iterOrder;\\n        } else {\\n            if (sumBuyAmount < sellAmount) {\\n                // case 2: initialAuction order is partically filled\\n                // We require that the price was the initialOrderLimit price's inverse\\n                // as this ensures that the for-loop iterated through all orders\\n                // and all orders are considered\\n                require(\\n                    priceNumerator.mul(buyAmount) ==\\n                        sellAmount.mul(priceDenominator),\\n                    \\\"supplied price must be inverse initialOrderLimit\\\"\\n                );\\n                auctionData[auctionId].volumeClearingPriceOrder = uint96(\\n                    sumBuyAmount\\n                );\\n                auctionData[auctionId]\\n                    .clearingPriceOrder = IterableOrderedOrderSet.encodeOrder(\\n                    auctioneerId,\\n                    priceNumerator,\\n                    priceDenominator\\n                );\\n            } else {\\n                // case 3: no order is partically filled\\n                // In this case the sumBuyAmount must be equal to\\n                // the sellAmount of the initialAuctionOrder, without\\n                // any rounding errors.\\n                // This price is always existing as we can choose\\n                // priceNumerator = sellAmount and priceDenominator = sumSellAmount\\n                auctionData[auctionId].clearingPriceOrder = price;\\n                require(\\n                    sumBuyAmount == sellAmount,\\n                    \\\"price is not clearing price\\\"\\n                );\\n                require(\\n                    priceNumerator.mul(buyAmount) <=\\n                        sellAmount.mul(priceDenominator),\\n                    \\\"clearing price is better than initialAuctionOrder\\\"\\n                );\\n            }\\n        }\\n\\n        uint256 submissionDelay =\\n            block.timestamp.sub(auctionData[auctionId].auctionEndDate);\\n        uint256 rewardFactor =\\n            Math.min(\\n                uint256(100000000).div(\\n                    submissionDelay.mul(submissionDelay).add(1)\\n                ),\\n                10\\n            );\\n\\n        emit AuctionCleared(\\n            auctionId,\\n            priceNumerator,\\n            priceDenominator,\\n            rewardFactor\\n        );\\n        claimAuctioneerFunds(auctionId, rewardFactor);\\n    }\\n\\n    function claimFromParticipantOrder(\\n        uint256 auctionId,\\n        bytes32[] memory orders,\\n        bytes32[] memory previousOrders\\n    )\\n        public\\n        atStageFinished(auctionId)\\n        returns (uint256 sellTokenAmount, uint256 buyTokenAmount)\\n    {\\n        AuctionData memory auction = auctionData[auctionId];\\n        (, uint96 priceNumerator, uint96 priceDenominator) =\\n            auction.clearingPriceOrder.decodeOrder();\\n        for (uint256 i = 0; i < orders.length; i++) {\\n            require(\\n                sellOrders[auctionId].remove(orders[i], previousOrders[i]),\\n                \\\"order is no longer claimable\\\"\\n            );\\n            (uint64 userId, , uint96 sellAmount) = orders[i].decodeOrder();\\n            if (orders[i] == auction.clearingPriceOrder) {\\n                sellTokenAmount = auction\\n                    .volumeClearingPriceOrder\\n                    .mul(priceNumerator)\\n                    .div(priceDenominator);\\n                buyTokenAmount = sellAmount.sub(\\n                    auction.volumeClearingPriceOrder\\n                );\\n            } else {\\n                if (orders[i].smallerThan(auction.clearingPriceOrder)) {\\n                    sellTokenAmount = sellAmount.mul(priceNumerator).div(\\n                        priceDenominator\\n                    );\\n                } else {\\n                    buyTokenAmount = sellAmount;\\n                }\\n            }\\n            sendOutTokens(auctionId, sellTokenAmount, buyTokenAmount, userId);\\n        }\\n    }\\n\\n    function claimAuctioneerFunds(uint256 auctionId, uint256 rewardFactor)\\n        internal\\n        returns (uint256 sellTokenAmount, uint256 buyTokenAmount)\\n    {\\n        (uint64 auctioneerId, uint96 buyAmount, uint96 sellAmount) =\\n            auctionData[auctionId].initialAuctionOrder.decodeOrder();\\n        auctionData[auctionId].initialAuctionOrder = bytes32(0);\\n        (, uint96 priceNumerator, uint96 priceDenominator) =\\n            auctionData[auctionId].clearingPriceOrder.decodeOrder();\\n        if (priceNumerator.mul(buyAmount) == priceDenominator.mul(sellAmount)) {\\n            // In this case we have a partial match of the initialSellOrder\\n            sellTokenAmount = sellAmount.sub(\\n                auctionData[auctionId].volumeClearingPriceOrder\\n            );\\n            buyTokenAmount = auctionData[auctionId]\\n                .volumeClearingPriceOrder\\n                .mul(priceDenominator)\\n                .div(priceNumerator);\\n        } else {\\n            buyTokenAmount = sellAmount.mul(priceDenominator).div(\\n                priceNumerator\\n            );\\n        }\\n        sendOutTokens(\\n            auctionId,\\n            sellTokenAmount.mul(rewardFactor.sub(1)).div(rewardFactor),\\n            buyTokenAmount.mul(rewardFactor.sub(1)).div(rewardFactor),\\n            auctioneerId\\n        );\\n        sendOutTokens(\\n            auctionId,\\n            sellTokenAmount.div(rewardFactor),\\n            buyTokenAmount.div(rewardFactor),\\n            getUserId(msg.sender)\\n        );\\n    }\\n\\n    function sendOutTokens(\\n        uint256 auctionId,\\n        uint256 sellTokenAmount,\\n        uint256 buyTokenAmount,\\n        uint64 userId\\n    ) internal {\\n        address userAddress = registeredUsers.getAddressAt(userId);\\n        require(\\n            auctionData[auctionId].sellToken.transfer(\\n                userAddress,\\n                sellTokenAmount\\n            ),\\n            \\\"Claim transfer for sellToken failed\\\"\\n        );\\n        require(\\n            auctionData[auctionId].buyToken.transfer(\\n                userAddress,\\n                buyTokenAmount\\n            ),\\n            \\\"Claim transfer for buyToken failed\\\"\\n        );\\n    }\\n\\n    function registerUser(address user) public returns (uint64 userId) {\\n        require(\\n            registeredUsers.insert(numUsers, user),\\n            \\\"User already registered\\\"\\n        );\\n        userId = numUsers;\\n        numUsers = numUsers.add(1).toUint64();\\n        emit UserRegistration(user, userId);\\n    }\\n\\n    function getUserId(address user) public returns (uint64 userId) {\\n        if (registeredUsers.hasAddress(user)) {\\n            return registeredUsers.getId(user);\\n        } else {\\n            return registerUser(user);\\n        }\\n    }\\n\\n    function getSecondsRemainingInBatch(uint256 auctionId)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        if (auctionData[auctionId].auctionEndDate < block.timestamp) {\\n            return 0;\\n        }\\n        return auctionData[auctionId].auctionEndDate.sub(block.timestamp);\\n    }\\n}\\n\",\"keccak256\":\"0xf2f1e621614b47ae403cca5d17abcf84321890dcd164231166462d8c61084adb\",\"license\":\"LGPL-3.0-or-newer\"},\"contracts/libraries/IdToAddressBiMap.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-or-newer\\npragma solidity ^0.6.0;\\n\\nlibrary IdToAddressBiMap {\\n    struct Data {\\n        mapping(uint64 => address) idToAddress;\\n        mapping(address => uint64) addressToId;\\n    }\\n\\n    function hasId(Data storage self, uint64 id) internal view returns (bool) {\\n        return self.idToAddress[id + 1] != address(0);\\n    }\\n\\n    function hasAddress(Data storage self, address addr)\\n        internal\\n        view\\n        returns (bool)\\n    {\\n        return self.addressToId[addr] != 0;\\n    }\\n\\n    function getAddressAt(Data storage self, uint64 id)\\n        internal\\n        view\\n        returns (address)\\n    {\\n        require(hasId(self, id), \\\"Must have ID to get Address\\\");\\n        return self.idToAddress[id + 1];\\n    }\\n\\n    function getId(Data storage self, address addr)\\n        internal\\n        view\\n        returns (uint64)\\n    {\\n        require(hasAddress(self, addr), \\\"Must have Address to get ID\\\");\\n        return self.addressToId[addr] - 1;\\n    }\\n\\n    function insert(\\n        Data storage self,\\n        uint64 id,\\n        address addr\\n    ) internal returns (bool) {\\n        require(addr != address(0), \\\"Cannot insert zero address\\\");\\n        require(id != uint64(-1), \\\"Cannot insert max uint64\\\");\\n        // Ensure bijectivity of the mappings\\n        if (\\n            self.addressToId[addr] != 0 ||\\n            self.idToAddress[id + 1] != address(0)\\n        ) {\\n            return false;\\n        }\\n        self.idToAddress[id + 1] = addr;\\n        self.addressToId[addr] = id + 1;\\n        return true;\\n    }\\n}\\n\",\"keccak256\":\"0x0d404b2e03864d7a388840e30bfb6da0ddd3dd2f152097894838b72d86e30a39\",\"license\":\"LGPL-3.0-or-newer\"},\"contracts/libraries/IterableOrderedOrderSet.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-or-newer\\npragma solidity >=0.6.8;\\n\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\n\\nlibrary IterableOrderedOrderSet {\\n    using SafeMath for uint96;\\n    using IterableOrderedOrderSet for bytes32;\\n    uint96 private constant MIN_RATE = uint96(0);\\n    uint96 private constant MAX_RATE = uint96(-1);\\n\\n    // getValue(QUEUE_START) returns 0\\n    bytes32 internal constant QUEUE_START =\\n        0x0000000000000000000000000000000000000000000000000000000000000001;\\n    // getValue(QUEUE_END) returns MaxValue in uint64\\n    bytes32 internal constant QUEUE_END =\\n        0xffffffffffffffffffffffffffffffffffffffff000000000000000000000001;\\n\\n    struct Data {\\n        mapping(bytes32 => bytes32) nextMap;\\n        uint256 size;\\n    }\\n\\n    struct Order {\\n        uint64 owner;\\n        uint96 buyAmount;\\n        uint96 sellAmount;\\n    }\\n\\n    function insert(\\n        Data storage self,\\n        bytes32 elementToInsert,\\n        bytes32 elmentBeforeNewOne\\n    ) internal returns (bool) {\\n        (, , uint96 denominator) = decodeOrder(elementToInsert);\\n        require(denominator != uint96(0), \\\"Inserting zero is not supported\\\");\\n\\n        if (contains(self, elementToInsert)) {\\n            return false;\\n        }\\n        bool foundposition = false;\\n        if (self.size == 0) {\\n            self.nextMap[QUEUE_START] = elementToInsert;\\n            self.nextMap[elementToInsert] = QUEUE_END;\\n        } else {\\n            require(\\n                elmentBeforeNewOne == QUEUE_START ||\\n                    contains(self, elmentBeforeNewOne),\\n                \\\"elmentBeforeNewOne must be valid order\\\"\\n            );\\n            bytes32 elmentBeforeNewOneNext = elmentBeforeNewOne;\\n            while (!foundposition) {\\n                if (elmentBeforeNewOneNext.smallerThan(elementToInsert)) {\\n                    if (\\n                        !self.nextMap[elmentBeforeNewOneNext].smallerThan(\\n                            elementToInsert\\n                        )\\n                    ) {\\n                        bytes32 tmp = self.nextMap[elmentBeforeNewOneNext];\\n                        self.nextMap[elmentBeforeNewOneNext] = elementToInsert;\\n                        self.nextMap[elementToInsert] = tmp;\\n                        foundposition = true;\\n                    } else {\\n                        elmentBeforeNewOneNext = self.nextMap[\\n                            elmentBeforeNewOneNext\\n                        ];\\n                    }\\n                } else {\\n                    return false; // elmentBeforeNewOne was incorrect\\n                }\\n            }\\n        }\\n        self.size++;\\n        return true;\\n    }\\n\\n    function remove(\\n        Data storage self,\\n        bytes32 elementToRemove,\\n        bytes32 elementBeforeRemoval\\n    ) internal returns (bool) {\\n        if (!contains(self, elementToRemove)) {\\n            return false;\\n        }\\n        bytes32 elementBeforeRemovalNext = elementBeforeRemoval;\\n        while (self.nextMap[elementBeforeRemovalNext] != elementToRemove) {\\n            if (elementBeforeRemovalNext == QUEUE_END) {\\n                return false;\\n            }\\n            elementBeforeRemovalNext = self.nextMap[elementBeforeRemovalNext];\\n        }\\n        self.nextMap[elementBeforeRemovalNext] = self.nextMap[elementToRemove];\\n        self.nextMap[elementToRemove] = bytes32(0);\\n        self.size--;\\n        return true;\\n    }\\n\\n    function contains(Data storage self, bytes32 value)\\n        internal\\n        view\\n        returns (bool)\\n    {\\n        if (value == QUEUE_START || value == QUEUE_END) {\\n            return false;\\n        }\\n        return self.nextMap[value] != bytes32(0);\\n    }\\n\\n    function smallerThan(bytes32 orderLeft, bytes32 orderRight)\\n        internal\\n        pure\\n        returns (bool)\\n    {\\n        (\\n            uint64 userIdLeft,\\n            uint96 priceNumeratorLeft,\\n            uint96 priceDenominatorLeft\\n        ) = decodeOrder(orderLeft);\\n        (\\n            uint64 userIdRight,\\n            uint96 priceNumeratorRight,\\n            uint96 priceDenominatorRight\\n        ) = decodeOrder(orderRight);\\n\\n        if (\\n            priceNumeratorLeft.mul(priceDenominatorRight) <\\n            priceNumeratorRight.mul(priceDenominatorLeft)\\n        ) return true;\\n        if (\\n            priceNumeratorLeft.mul(priceDenominatorRight) >\\n            priceNumeratorRight.mul(priceDenominatorLeft)\\n        ) return false;\\n\\n        require(\\n            userIdLeft != userIdRight,\\n            \\\"user is not allowed to place same order twice\\\"\\n        );\\n        if (userIdLeft < userIdRight) {\\n            return true;\\n        }\\n        return false;\\n    }\\n\\n    function first(Data storage self) internal view returns (bytes32) {\\n        require(self.size > 0, \\\"Trying to get first from empty set\\\");\\n        return self.nextMap[QUEUE_START];\\n    }\\n\\n    function next(Data storage self, bytes32 value)\\n        internal\\n        view\\n        returns (bytes32)\\n    {\\n        require(\\n            value != QUEUE_END,\\n            \\\"Trying to get next of non-existent element\\\"\\n        );\\n        require(\\n            self.nextMap[value] != bytes32(0),\\n            \\\"Trying to get next of last element\\\"\\n        );\\n        return self.nextMap[value];\\n    }\\n\\n    function decodeOrder(bytes32 _orderData)\\n        internal\\n        pure\\n        returns (\\n            uint64 userId,\\n            uint96 buyAmount,\\n            uint96 sellAmount\\n        )\\n    {\\n        userId = uint64(uint256(_orderData) / 2**192);\\n        buyAmount = uint96((uint256(_orderData) % 2**192) / 2**96);\\n        sellAmount = uint96((uint256(_orderData) % 2**96));\\n    }\\n\\n    function encodeOrder(\\n        uint64 userId,\\n        uint96 buyAmount,\\n        uint96 sellAmount\\n    ) internal pure returns (bytes32) {\\n        return\\n            bytes32(\\n                uint256(userId) *\\n                    2**192 +\\n                    uint256(buyAmount) *\\n                    2**96 +\\n                    uint256(sellAmount)\\n            );\\n    }\\n}\\n\",\"keccak256\":\"0xde2bb84dfe6eb81301281e3e5608dd4bae42225974a96ae5fe4a16f64e99c2d9\",\"license\":\"LGPL-3.0-or-newer\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100b45760003560e01c806355fc62d21161007157806355fc62d2146102db57806356a23c5a1461037a578063a7e76644146104d0578063c1110dd6146104ee578063cc7631091461065f578063f9f0751a14610849576100b4565b806315d37b4b146100b957806319a50f49146100fb5780632199d5cd146101235780632b956ff7146101855780634087db46146101e75780634a8393f314610299575b600080fd5b6100e5600480360360208110156100cf57600080fd5b8101908080359060200190929190505050610881565b6040518082815260200191505060405180910390f35b6101036108db565b604051808267ffffffffffffffff16815260200191505060405180910390f35b6101656004803603602081101561013957600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506108f5565b604051808267ffffffffffffffff16815260200191505060405180910390f35b6101c76004803603602081101561019b57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610a76565b604051808267ffffffffffffffff16815260200191505060405180910390f35b610283600480360360a08110156101fd57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919080356bffffffffffffffffffffffff16906020019092919080356bffffffffffffffffffffffff169060200190929190505050610abd565b6040518082815260200191505060405180910390f35b6102c5600480360360208110156102af57600080fd5b8101908080359060200190929190505050610e0f565b6040518082815260200191505060405180910390f35b610307600480360360208110156102f157600080fd5b8101908080359060200190929190505050610e2d565b604051808773ffffffffffffffffffffffffffffffffffffffff1681526020018673ffffffffffffffffffffffffffffffffffffffff168152602001858152602001848152602001838152602001826bffffffffffffffffffffffff168152602001965050505050505060405180910390f35b6104ce6004803603606081101561039057600080fd5b8101908080359060200190929190803590602001906401000000008111156103b757600080fd5b8201836020820111156103c957600080fd5b803590602001918460208302840111640100000000831117156103eb57600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f8201169050808301925050505050505091929192908035906020019064010000000081111561044b57600080fd5b82018360208201111561045d57600080fd5b8035906020019184602083028401116401000000008311171561047f57600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f820116905080830192505050505050509192919290505050610ec1565b005b6104d8611226565b6040518082815260200191505060405180910390f35b6106426004803603606081101561050457600080fd5b81019080803590602001909291908035906020019064010000000081111561052b57600080fd5b82018360208201111561053d57600080fd5b8035906020019184602083028401116401000000008311171561055f57600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f820116905080830192505050505050509192919290803590602001906401000000008111156105bf57600080fd5b8201836020820111156105d157600080fd5b803590602001918460208302840111640100000000831117156105f357600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f82011690508083019250505050505050919291929050505061122c565b604051808381526020018281526020019250505060405180910390f35b6108476004803603608081101561067557600080fd5b81019080803590602001909291908035906020019064010000000081111561069c57600080fd5b8201836020820111156106ae57600080fd5b803590602001918460208302840111640100000000831117156106d057600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f8201169050808301925050505050505091929192908035906020019064010000000081111561073057600080fd5b82018360208201111561074257600080fd5b8035906020019184602083028401116401000000008311171561076457600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f820116905080830192505050505050509192919290803590602001906401000000008111156107c457600080fd5b8201836020820111156107d657600080fd5b803590602001918460208302840111640100000000831117156107f857600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f820116905080830192505050505050509192919290505050611660565b005b61087f6004803603604081101561085f57600080fd5b810190808035906020019092919080359060200190929190505050611b5c565b005b600042600160008481526020019081526020016000206002015410156108aa57600090506108d6565b6108d34260016000858152602001908152602001600020600201546122f390919063ffffffff16565b90505b919050565b600460009054906101000a900467ffffffffffffffff1681565b6000610923600460009054906101000a900467ffffffffffffffff1683600261233d9092919063ffffffff16565b610995576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260178152602001807f5573657220616c7265616479207265676973746572656400000000000000000081525060200191505060405180910390fd5b600460009054906101000a900467ffffffffffffffff1690506109ea6109e56001600460009054906101000a900467ffffffffffffffff1667ffffffffffffffff1661266390919063ffffffff16565b6126eb565b600460006101000a81548167ffffffffffffffff021916908367ffffffffffffffff1602179055507f6838f67cb358c332087b73dbe769a6c869a5f87225236c16dda5d0013a77074c8282604051808373ffffffffffffffffffffffffffffffffffffffff1681526020018267ffffffffffffffff1681526020019250505060405180910390a1919050565b6000610a8c82600261275690919063ffffffff16565b15610aac57610aa58260026127c390919063ffffffff16565b9050610ab8565b610ab5826108f5565b90505b919050565b600080610ac933610a76565b90508673ffffffffffffffffffffffffffffffffffffffff166323b872dd3330876040518463ffffffff1660e01b8152600401808473ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff168152602001826bffffffffffffffffffffffff1681526020019350505050602060405180830381600087803b158015610b6857600080fd5b505af1158015610b7c573d6000803e3d6000fd5b505050506040513d6020811015610b9257600080fd5b8101908080519060200190929190505050610c15576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601b8152602001807f7472616e7366657220776173206e6f74207375636365737366756c000000000081525060200191505060405180910390fd5b6005600081548092919060010191905055506040518060c001604052808873ffffffffffffffffffffffffffffffffffffffff1681526020018773ffffffffffffffffffffffffffffffffffffffff1681526020018642018152602001610c7d8386886128a2565b81526020016000801b815260200160006bffffffffffffffffffffffff1681525060016000600554815260200190815260200160002060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060408201518160020155606082015181600301556080820151816004015560a08201518160050160006101000a8154816bffffffffffffffffffffffff02191690836bffffffffffffffffffffffff1602179055509050508573ffffffffffffffffffffffffffffffffffffffff168773ffffffffffffffffffffffffffffffffffffffff167f15dd9639accd24fcb10b44fe33886ce03e228e4e6ba1f65791edf66fa4acfa036005546040518082815260200191505060405180910390a360055491505095945050505050565b60006020528060005260406000206000915090508060010154905081565b60016020528060005260406000206000915090508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060020154908060030154908060040154908060050160009054906101000a90046bffffffffffffffffffffffff16905086565b8260016000828152602001908152602001600020600201544210610f30576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526022815260200180613bc06022913960400191505060405180910390fd5b6000610f3b33610a76565b90506000805b85518110156110c9576000806000610f6b898581518110610f5e57fe5b6020026020010151612905565b9250925092508567ffffffffffffffff168367ffffffffffffffff1614610fdd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260238152602001806139e26023913960400191505060405180910390fd5b611029898581518110610fec57fe5b602002602001015189868151811061100057fe5b60200260200101516000808e81526020019081526020016000206129939092919063ffffffff16565b156110b95761104f826bffffffffffffffffffffffff168661266390919063ffffffff16565b94508567ffffffffffffffff168a7fad1f0a9acc2f48ab1da69f409c30811bf157a52958535ee74977386574f5b62d848460405180836bffffffffffffffffffffffff168152602001826bffffffffffffffffffffffff1681526020019250505060405180910390a35b5050508080600101915050610f41565b506001600087815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33836040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b15801561117157600080fd5b505af1158015611185573d6000803e3d6000fd5b505050506040513d602081101561119b57600080fd5b810190808051906020019092919050505061121e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601b8152602001807f7472616e7366657220776173206e6f74207375636365737366756c000000000081525060200191505060405180910390fd5b505050505050565b60055481565b600080846000801b600160008381526020019081526020016000206004015414156112bf576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260188152602001807f41756374696f6e206e6f74207965742066696e6973686564000000000000000081525060200191505060405180910390fd5b6112c761396b565b600160008881526020019081526020016000206040518060c00160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016002820154815260200160038201548152602001600482015481526020016005820160009054906101000a90046bffffffffffffffffffffffff166bffffffffffffffffffffffff166bffffffffffffffffffffffff168152505090506000806113ff8360800151612905565b925092505060005b88518110156116535761145c89828151811061141f57fe5b602002602001015189838151811061143357fe5b60200260200101516000808e81526020019081526020016000206129939092919063ffffffff16565b6114ce576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601c8152602001807f6f72646572206973206e6f206c6f6e67657220636c61696d61626c650000000081525060200191505060405180910390fd5b6000806114ed8b84815181106114e057fe5b6020026020010151612905565b925050915085608001518b848151811061150357fe5b602002602001015114156115a057611564846bffffffffffffffffffffffff16611556876bffffffffffffffffffffffff168960a001516bffffffffffffffffffffffff16612a8e90919063ffffffff16565b612b1490919063ffffffff16565b98506115998660a001516bffffffffffffffffffffffff16826bffffffffffffffffffffffff166122f390919063ffffffff16565b9750611638565b6115ca86608001518c85815181106115b457fe5b6020026020010151612b5e90919063ffffffff16565b156116255761161e846bffffffffffffffffffffffff16611610876bffffffffffffffffffffffff16846bffffffffffffffffffffffff16612a8e90919063ffffffff16565b612b1490919063ffffffff16565b9850611637565b806bffffffffffffffffffffffff1697505b5b6116448c8a8a85612d16565b50508080600101915050611407565b5050505050935093915050565b83600160008281526020019081526020016000206002015442106116cf576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526022815260200180613bc06022913960400191505060405180910390fd5b6000806116f16001600089815260200190815260200160002060030154612905565b925092505060008061170233610a76565b905060005b88518110156119de5761175288828151811061171f57fe5b60200260200101516bffffffffffffffffffffffff16856bffffffffffffffffffffffff16612a8e90919063ffffffff16565b611794866bffffffffffffffffffffffff168b848151811061177057fe5b60200260200101516bffffffffffffffffffffffff16612a8e90919063ffffffff16565b106117ea576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526029815260200180613b976029913960400191505060405180910390fd5b611388846bffffffffffffffffffffffff168161180357fe5b0489828151811061181057fe5b60200260200101516bffffffffffffffffffffffff1611611899576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600f8152602001807f6f7264657220746f6f20736d616c6c000000000000000000000000000000000081525060200191505060405180910390fd5b60006119046118cf848c85815181106118ae57fe5b60200260200101518c86815181106118c257fe5b60200260200101516128a2565b8984815181106118db57fe5b60200260200101516000808f8152602001908152602001600020612fa39092919063ffffffff16565b905080156119d05761194089838151811061191b57fe5b60200260200101516bffffffffffffffffffffffff168561266390919063ffffffff16565b93508267ffffffffffffffff168b7f9304f2fc7ed6d42c0400e678dbc7283e1e9054889c3afea5f965adff66ef9eac8c858151811061197b57fe5b60200260200101518c868151811061198f57fe5b602002602001015160405180836bffffffffffffffffffffffff168152602001826bffffffffffffffffffffffff1681526020019250505060405180910390a35b508080600101915050611707565b50600160008a815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd3330856040518463ffffffff1660e01b8152600401808473ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019350505050602060405180830381600087803b158015611aa457600080fd5b505af1158015611ab8573d6000803e3d6000fd5b505050506040513d6020811015611ace57600080fd5b8101908080519060200190929190505050611b51576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601b8152602001807f7472616e7366657220776173206e6f74207375636365737366756c000000000081525060200191505060405180910390fd5b505050505050505050565b81600160008281526020019081526020016000206002015442118015611b9a57506000801b6001600083815260200190815260200160002060040154145b611bef576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526028815260200180613b1f6028913960400191505060405180910390fd5b600080611bfb84612905565b92509250506000806000611c24600160008a815260200190815260200160002060030154612905565b9250925092506000856bffffffffffffffffffffffff1611611cae576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260158152602001807f7072696365206d75737420626520706f7374697665000000000000000000000081525060200191505060405180910390fd5b600080600160001b905060008060008c8152602001908152602001600020600101541115611d8057611cfa816000808d815260200190815260200160002061323490919063ffffffff16565b90505b888114158015611d1c5750611d1b8982612b5e90919063ffffffff16565b5b15611d7f576000611d2c82612905565b92505050611d51816bffffffffffffffffffffffff168461266390919063ffffffff16565b9250611d77826000808e815260200190815260200160002061323490919063ffffffff16565b915050611cfd565b5b6000611dc3876bffffffffffffffffffffffff16611db58a6bffffffffffffffffffffffff1686612a8e90919063ffffffff16565b612b1490919063ffffffff16565b9050818a1415611f68576000611dd883612905565b925050506000611dff83876bffffffffffffffffffffffff166122f390919063ffffffff16565b9050611e428a6bffffffffffffffffffffffff16611e348b6bffffffffffffffffffffffff1684612a8e90919063ffffffff16565b612b1490919063ffffffff16565b600160008f815260200190815260200160002060050160006101000a8154816bffffffffffffffffffffffff02191690836bffffffffffffffffffffffff160217905550816bffffffffffffffffffffffff16600160008f815260200190815260200160002060050160009054906101000a90046bffffffffffffffffffffffff166bffffffffffffffffffffffff161115611f46576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601f8152602001807f6f726465722063616e206e6f7420626520636c656172696e67206f726465720081525060200191505060405180910390fd5b83600160008f81526020019081526020016000206004018190555050506121f6565b836bffffffffffffffffffffffff168110156120a157611fad876bffffffffffffffffffffffff16856bffffffffffffffffffffffff16612a8e90919063ffffffff16565b611fdc866bffffffffffffffffffffffff168a6bffffffffffffffffffffffff16612a8e90919063ffffffff16565b14612032576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526030815260200180613a056030913960400191505060405180910390fd5b80600160008d815260200190815260200160002060050160006101000a8154816bffffffffffffffffffffffff02191690836bffffffffffffffffffffffff1602179055506120828689896128a2565b600160008d8152602001908152602001600020600401819055506121f5565b89600160008d815260200190815260200160002060040181905550836bffffffffffffffffffffffff16811461213f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601b8152602001807f7072696365206973206e6f7420636c656172696e67207072696365000000000081525060200191505060405180910390fd5b61216e876bffffffffffffffffffffffff16856bffffffffffffffffffffffff16612a8e90919063ffffffff16565b61219d866bffffffffffffffffffffffff168a6bffffffffffffffffffffffff16612a8e90919063ffffffff16565b11156121f4576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526031815260200180613a576031913960400191505060405180910390fd5b5b5b6000612221600160008e815260200190815260200160002060020154426122f390919063ffffffff16565b9050600061226b61226461225160016122438687612a8e90919063ffffffff16565b61266390919063ffffffff16565b6305f5e100612b1490919063ffffffff16565b600a613341565b90507f5630ff72dd0a997d2783277090c48828946009a78b7a8d4cb290a31796474c368d8b8b8460405180858152602001846bffffffffffffffffffffffff168152602001836bffffffffffffffffffffffff16815260200182815260200194505050505060405180910390a16122e28d8261335a565b505050505050505050505050505050565b600061233583836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815250613623565b905092915050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156123e1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601a8152602001807f43616e6e6f7420696e73657274207a65726f206164647265737300000000000081525060200191505060405180910390fd5b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff67ffffffffffffffff168367ffffffffffffffff16141561248b576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260188152602001807f43616e6e6f7420696e73657274206d61782075696e743634000000000000000081525060200191505060405180910390fd5b60008460010160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900467ffffffffffffffff1667ffffffffffffffff161415806125735750600073ffffffffffffffffffffffffffffffffffffffff168460000160006001860167ffffffffffffffff1667ffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614155b15612581576000905061265c565b818460000160006001860167ffffffffffffffff1667ffffffffffffffff16815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600183018460010160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548167ffffffffffffffff021916908367ffffffffffffffff160217905550600190505b9392505050565b6000808284019050838110156126e1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601b8152602001807f536166654d6174683a206164646974696f6e206f766572666c6f77000000000081525060200191505060405180910390fd5b8091505092915050565b600068010000000000000000821061274e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526026815260200180613ad36026913960400191505060405180910390fd5b819050919050565b6000808360010160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900467ffffffffffffffff1667ffffffffffffffff161415905092915050565b60006127cf8383612756565b612841576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601b8152602001807f4d7573742068617665204164647265737320746f20676574204944000000000081525060200191505060405180910390fd5b60018360010160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900467ffffffffffffffff1603905092915050565b6000816bffffffffffffffffffffffff166c01000000000000000000000000846bffffffffffffffffffffffff160278010000000000000000000000000000000000000000000000008667ffffffffffffffff1602010160001b90509392505050565b600080600078010000000000000000000000000000000000000000000000008460001c8161292f57fe5b0492506c0100000000000000000000000078010000000000000000000000000000000000000000000000008560001c8161296557fe5b068161296d57fe5b0491506c010000000000000000000000008460001c8161298957fe5b0690509193909250565b600061299f84846136e3565b6129ac5760009050612a87565b60008290505b838560000160008381526020019081526020016000205414612a20577fffffffffffffffffffffffffffffffffffffffff00000000000000000000000160001b811415612a03576000915050612a87565b8460000160008281526020019081526020016000205490506129b2565b84600001600085815260200190815260200160002054856000016000838152602001908152602001600020819055506000801b8560000160008681526020019081526020016000208190555084600101600081548092919060019003919050555060019150505b9392505050565b600080831415612aa15760009050612b0e565b6000828402905082848281612ab257fe5b0414612b09576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526021815260200180613ab26021913960400191505060405180910390fd5b809150505b92915050565b6000612b5683836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f00000000000081525061374c565b905092915050565b600080600080612b6d86612905565b9250925092506000806000612b8188612905565b925092509250612bb6846bffffffffffffffffffffffff16836bffffffffffffffffffffffff16612a8e90919063ffffffff16565b612be5826bffffffffffffffffffffffff16876bffffffffffffffffffffffff16612a8e90919063ffffffff16565b1015612bfa5760019650505050505050612d10565b612c29846bffffffffffffffffffffffff16836bffffffffffffffffffffffff16612a8e90919063ffffffff16565b612c58826bffffffffffffffffffffffff16876bffffffffffffffffffffffff16612a8e90919063ffffffff16565b1115612c6d5760009650505050505050612d10565b8267ffffffffffffffff168667ffffffffffffffff161415612cda576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602d815260200180613b47602d913960400191505060405180910390fd5b8267ffffffffffffffff168667ffffffffffffffff161015612d055760019650505050505050612d10565b600096505050505050505b92915050565b6000612d2c82600261381290919063ffffffff16565b90506001600086815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb82866040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b158015612dd557600080fd5b505af1158015612de9573d6000803e3d6000fd5b505050506040513d6020811015612dff57600080fd5b8101908080519060200190929190505050612e65576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526023815260200180613b746023913960400191505060405180910390fd5b6001600086815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb82856040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b158015612f0c57600080fd5b505af1158015612f20573d6000803e3d6000fd5b505050506040513d6020811015612f3657600080fd5b8101908080519060200190929190505050612f9c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526022815260200180613be26022913960400191505060405180910390fd5b5050505050565b600080612faf84612905565b9250505060006bffffffffffffffffffffffff16816bffffffffffffffffffffffff161415613046576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601f8152602001807f496e73657274696e67207a65726f206973206e6f7420737570706f727465640081525060200191505060405180910390fd5b61305085856136e3565b1561305f57600091505061322d565b600080866001015414156130cd5784866000016000600160001b8152602001908152602001600020819055507fffffffffffffffffffffffffffffffffffffffff00000000000000000000000160001b86600001600087815260200190815260200160002081905550613212565b600160001b8414806130e557506130e486856136e3565b5b61313a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526026815260200180613af96026913960400191505060405180910390fd5b60008490505b81613210576131588682612b5e90919063ffffffff16565b156131ff576131858688600001600084815260200190815260200160002054612b5e90919063ffffffff16565b6131e15760008760000160008381526020019081526020016000205490508688600001600084815260200190815260200160002081905550808860000160008981526020019081526020016000208190555060019250506131fa565b8660000160008281526020019081526020016000205490505b61320b565b6000935050505061322d565b613140565b505b85600101600081548092919060010191905055506001925050505b9392505050565b60007fffffffffffffffffffffffffffffffffffffffff00000000000000000000000160001b8214156132b2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602a815260200180613a88602a913960400191505060405180910390fd5b6000801b836000016000848152602001908152602001600020541415613323576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526022815260200180613a356022913960400191505060405180910390fd5b82600001600083815260200190815260200160002054905092915050565b60008183106133505781613352565b825b905092915050565b60008060008060006133816001600089815260200190815260200160002060030154612905565b9250925092506000801b60016000898152602001908152602001600020600301819055506000806133c7600160008b815260200190815260200160002060040154612905565b92509250506133fb836bffffffffffffffffffffffff16826bffffffffffffffffffffffff16612a8e90919063ffffffff16565b61342a856bffffffffffffffffffffffff16846bffffffffffffffffffffffff16612a8e90919063ffffffff16565b14156135135761348d600160008b815260200190815260200160002060050160009054906101000a90046bffffffffffffffffffffffff166bffffffffffffffffffffffff16846bffffffffffffffffffffffff166122f390919063ffffffff16565b965061350c826bffffffffffffffffffffffff166134fe836bffffffffffffffffffffffff16600160008e815260200190815260200160002060050160009054906101000a90046bffffffffffffffffffffffff166bffffffffffffffffffffffff16612a8e90919063ffffffff16565b612b1490919063ffffffff16565b9550613565565b613562826bffffffffffffffffffffffff16613554836bffffffffffffffffffffffff16866bffffffffffffffffffffffff16612a8e90919063ffffffff16565b612b1490919063ffffffff16565b95505b6135df896135a18a61359361358460018e6122f390919063ffffffff16565b8c612a8e90919063ffffffff16565b612b1490919063ffffffff16565b6135d98b6135cb6135bc60018f6122f390919063ffffffff16565b8c612a8e90919063ffffffff16565b612b1490919063ffffffff16565b88612d16565b613617896135f68a8a612b1490919063ffffffff16565b6136098b8a612b1490919063ffffffff16565b61361233610a76565b612d16565b50505050509250929050565b60008383111582906136d0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561369557808201518184015260208101905061367a565b50505050905090810190601f1680156136c25780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b5060008385039050809150509392505050565b6000600160001b82148061371957507fffffffffffffffffffffffffffffffffffffffff00000000000000000000000160001b82145b156137275760009050613746565b6000801b83600001600084815260200190815260200160002054141590505b92915050565b600080831182906137f8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b838110156137bd5780820151818401526020810190506137a2565b50505050905090810190601f1680156137ea5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b50600083858161380457fe5b049050809150509392505050565b600061381e83836138e5565b613890576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601b8152602001807f4d757374206861766520494420746f206765742041646472657373000000000081525060200191505060405180910390fd5b8260000160006001840167ffffffffffffffff1667ffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905092915050565b60008073ffffffffffffffffffffffffffffffffffffffff168360000160006001850167ffffffffffffffff1667ffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415905092915050565b6040518060c00160405280600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff16815260200160008152602001600080191681526020016000801916815260200160006bffffffffffffffffffffffff168152509056fe4f6e6c792074686520757365722063616e2063616e63656c20686973206f7264657273737570706c696564207072696365206d75737420626520696e766572736520696e697469616c4f726465724c696d6974547279696e6720746f20676574206e657874206f66206c61737420656c656d656e74636c656172696e6720707269636520697320626574746572207468616e20696e697469616c41756374696f6e4f72646572547279696e6720746f20676574206e657874206f66206e6f6e2d6578697374656e7420656c656d656e74536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f7753616665436173743a2076616c756520646f65736e27742066697420696e2036342062697473656c6d656e744265666f72654e65774f6e65206d7573742062652076616c6964206f7264657241756374696f6e206e6f7420696e20736f6c7574696f6e207375626d697373696f6e20706861736575736572206973206e6f7420616c6c6f77656420746f20706c6163652073616d65206f72646572207477696365436c61696d207472616e7366657220666f722073656c6c546f6b656e206661696c65646c696d6974207072696365206e6f7420626574746572207468616e206d696d696d616c206f666665726e6f206c6f6e67657220696e206f7264657220706c6163656d656e74207068617365436c61696d207472616e7366657220666f7220627579546f6b656e206661696c6564a26469706673582212206da2e1c768250fca85a19b393c64d76a53b132882fd1859d9be099acd0061c7e64736f6c634300060c0033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1540,
        "contract": "contracts/EasyAuction.sol:EasyAuction",
        "label": "sellOrders",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_uint256,t_struct(Data)2739_storage)"
      },
      {
        "astId": 1544,
        "contract": "contracts/EasyAuction.sol:EasyAuction",
        "label": "auctionData",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_uint256,t_struct(AuctionData)1536_storage)"
      },
      {
        "astId": 1546,
        "contract": "contracts/EasyAuction.sol:EasyAuction",
        "label": "registeredUsers",
        "offset": 0,
        "slot": "2",
        "type": "t_struct(Data)2537_storage"
      },
      {
        "astId": 1548,
        "contract": "contracts/EasyAuction.sol:EasyAuction",
        "label": "numUsers",
        "offset": 0,
        "slot": "4",
        "type": "t_uint64"
      },
      {
        "astId": 1550,
        "contract": "contracts/EasyAuction.sol:EasyAuction",
        "label": "auctionCounter",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(ERC20)798": {
        "encoding": "inplace",
        "label": "contract ERC20",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint64)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint64)",
        "numberOfBytes": "32",
        "value": "t_uint64"
      },
      "t_mapping(t_bytes32,t_bytes32)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => bytes32)",
        "numberOfBytes": "32",
        "value": "t_bytes32"
      },
      "t_mapping(t_uint256,t_struct(AuctionData)1536_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct EasyAuction.AuctionData)",
        "numberOfBytes": "32",
        "value": "t_struct(AuctionData)1536_storage"
      },
      "t_mapping(t_uint256,t_struct(Data)2739_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct IterableOrderedOrderSet.Data)",
        "numberOfBytes": "32",
        "value": "t_struct(Data)2739_storage"
      },
      "t_mapping(t_uint64,t_address)": {
        "encoding": "mapping",
        "key": "t_uint64",
        "label": "mapping(uint64 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_struct(AuctionData)1536_storage": {
        "encoding": "inplace",
        "label": "struct EasyAuction.AuctionData",
        "members": [
          {
            "astId": 1525,
            "contract": "contracts/EasyAuction.sol:EasyAuction",
            "label": "sellToken",
            "offset": 0,
            "slot": "0",
            "type": "t_contract(ERC20)798"
          },
          {
            "astId": 1527,
            "contract": "contracts/EasyAuction.sol:EasyAuction",
            "label": "buyToken",
            "offset": 0,
            "slot": "1",
            "type": "t_contract(ERC20)798"
          },
          {
            "astId": 1529,
            "contract": "contracts/EasyAuction.sol:EasyAuction",
            "label": "auctionEndDate",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 1531,
            "contract": "contracts/EasyAuction.sol:EasyAuction",
            "label": "initialAuctionOrder",
            "offset": 0,
            "slot": "3",
            "type": "t_bytes32"
          },
          {
            "astId": 1533,
            "contract": "contracts/EasyAuction.sol:EasyAuction",
            "label": "clearingPriceOrder",
            "offset": 0,
            "slot": "4",
            "type": "t_bytes32"
          },
          {
            "astId": 1535,
            "contract": "contracts/EasyAuction.sol:EasyAuction",
            "label": "volumeClearingPriceOrder",
            "offset": 0,
            "slot": "5",
            "type": "t_uint96"
          }
        ],
        "numberOfBytes": "192"
      },
      "t_struct(Data)2537_storage": {
        "encoding": "inplace",
        "label": "struct IdToAddressBiMap.Data",
        "members": [
          {
            "astId": 2532,
            "contract": "contracts/EasyAuction.sol:EasyAuction",
            "label": "idToAddress",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_uint64,t_address)"
          },
          {
            "astId": 2536,
            "contract": "contracts/EasyAuction.sol:EasyAuction",
            "label": "addressToId",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_address,t_uint64)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Data)2739_storage": {
        "encoding": "inplace",
        "label": "struct IterableOrderedOrderSet.Data",
        "members": [
          {
            "astId": 2736,
            "contract": "contracts/EasyAuction.sol:EasyAuction",
            "label": "nextMap",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_bytes32,t_bytes32)"
          },
          {
            "astId": 2738,
            "contract": "contracts/EasyAuction.sol:EasyAuction",
            "label": "size",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      },
      "t_uint96": {
        "encoding": "inplace",
        "label": "uint96",
        "numberOfBytes": "12"
      }
    }
  }
}