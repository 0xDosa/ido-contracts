{
  "language": "Solidity",
  "sources": {
    "contracts/EasyAuction.sol": {
      "content": "// SPDX-License-Identifier: LGPL-3.0-or-newer\npragma solidity >=0.6.8;\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\nimport \"./libraries/IterableOrderedOrderSet.sol\";\nimport \"@openzeppelin/contracts/math/Math.sol\";\nimport \"@openzeppelin/contracts/math/SafeMath.sol\";\nimport \"./libraries/IdToAddressBiMap.sol\";\nimport \"@openzeppelin/contracts/utils/SafeCast.sol\";\n\ncontract EasyAuction {\n    using SafeMath for uint64;\n    using SafeMath for uint96;\n    using SafeMath for uint256;\n    using SafeCast for uint256; // Todo actually use safecast\n    using IterableOrderedOrderSet for IterableOrderedOrderSet.Data;\n    using IterableOrderedOrderSet for bytes32;\n    using IdToAddressBiMap for IdToAddressBiMap.Data;\n\n    uint256 internal constant MAX_BATCH_SIZE = 5000;\n\n    modifier atStageOrderplacement(uint256 auctionId) {\n        require(\n            block.timestamp < auctionData[auctionId].auctionEndDate,\n            \"no longer in order placement phase\"\n        );\n        _;\n    }\n\n    modifier atStageSolutionSubmission(uint256 auctionId) {\n        require(\n            block.timestamp > auctionData[auctionId].auctionEndDate &&\n                auctionData[auctionId].clearingPriceOrder == bytes32(0),\n            \"Auction not in solution submission phase\"\n        );\n        _;\n    }\n\n    modifier atStageFinished(uint256 auctionId) {\n        require(\n            auctionData[auctionId].clearingPriceOrder != bytes32(0),\n            \"Auction not yet finished\"\n        );\n        _;\n    }\n\n    event NewSellOrder(\n        uint256 indexed auctionId,\n        uint64 indexed userId,\n        uint96 buyAmount,\n        uint96 sellAmount\n    );\n    event CancellationSellOrders(\n        uint256 indexed auctionId,\n        uint64 indexed userId,\n        uint96 sellAmount,\n        uint96 buyAmount\n    );\n    event NewAuction(\n        uint256 auctionId,\n        ERC20 indexed _sellToken,\n        ERC20 indexed _buyToken\n    );\n    event AuctionCleared(\n        uint256 auctionId,\n        uint96 priceNumerator,\n        uint96 priceDenominator,\n        uint256 rewardFactor\n    );\n    event UserRegistration(address user, uint64 userId);\n\n    struct AuctionData {\n        ERC20 sellToken;\n        ERC20 buyToken;\n        uint256 auctionEndDate;\n        bytes32 initialAuctionOrder;\n        bytes32 clearingPriceOrder;\n        uint96 volumeClearingPriceOrder;\n    }\n    mapping(uint256 => IterableOrderedOrderSet.Data) public sellOrders;\n    mapping(uint256 => AuctionData) public auctionData;\n    IdToAddressBiMap.Data private registeredUsers;\n    uint64 public numUsers;\n    uint256 public auctionCounter;\n\n    function initiateAuction(\n        ERC20 _sellToken,\n        ERC20 _buyToken,\n        uint256 duration,\n        uint96 _sellAmount,\n        uint96 _minBuyAmount\n    ) public returns (uint256) {\n        uint64 userId = getUserId(msg.sender);\n        require(\n            _sellToken.transferFrom(msg.sender, address(this), _sellAmount),\n            \"transfer was not successful\"\n        );\n        auctionCounter++;\n        auctionData[auctionCounter] = AuctionData(\n            _sellToken,\n            _buyToken,\n            block.timestamp + duration,\n            IterableOrderedOrderSet.encodeOrder(\n                userId,\n                _minBuyAmount,\n                _sellAmount\n            ),\n            bytes32(0),\n            0\n        );\n        emit NewAuction(auctionCounter, _sellToken, _buyToken);\n        return auctionCounter;\n    }\n\n    function placeSellOrders(\n        uint256 auctionId,\n        uint96[] memory _minBuyAmounts,\n        uint96[] memory _sellAmounts,\n        bytes32[] memory _prevSellOrders\n    ) public atStageOrderplacement(auctionId) {\n        (\n            ,\n            uint96 buyAmountOfInitialAuctionOrder,\n            uint96 sellAmountOfInitialAuctionOrder\n        ) = auctionData[auctionId].initialAuctionOrder.decodeOrder();\n        uint256 sumOfSellAmounts = 0;\n        uint64 userId = getUserId(msg.sender);\n        for (uint256 i = 0; i < _minBuyAmounts.length; i++) {\n            require(\n                _minBuyAmounts[i].mul(buyAmountOfInitialAuctionOrder) <\n                    sellAmountOfInitialAuctionOrder.mul(_sellAmounts[i]),\n                \"limit price not better than mimimal offer\"\n            );\n            // small orders can not be allowed to quarantee price calculation\n            require(\n                _minBuyAmounts[i] >\n                    sellAmountOfInitialAuctionOrder / MAX_BATCH_SIZE,\n                \"order too small\"\n            );\n            bool success =\n                sellOrders[auctionId].insert(\n                    IterableOrderedOrderSet.encodeOrder(\n                        userId,\n                        _minBuyAmounts[i],\n                        _sellAmounts[i]\n                    ),\n                    _prevSellOrders[i]\n                );\n            if (success) {\n                sumOfSellAmounts = sumOfSellAmounts.add(_sellAmounts[i]);\n                emit NewSellOrder(\n                    auctionId,\n                    userId,\n                    _minBuyAmounts[i],\n                    _sellAmounts[i]\n                );\n            }\n        }\n        require(\n            auctionData[auctionId].buyToken.transferFrom(\n                msg.sender,\n                address(this),\n                sumOfSellAmounts\n            ),\n            \"transfer was not successful\"\n        );\n    }\n\n    function cancelSellOrders(\n        uint256 auctionId,\n        bytes32[] memory _sellOrders,\n        bytes32[] memory _prevSellOrders\n    ) public atStageOrderplacement(auctionId) {\n        uint64 userId = getUserId(msg.sender);\n        uint256 claimableAmount = 0;\n        for (uint256 i = 0; i < _sellOrders.length; i++) {\n            (\n                uint64 userIdOfIter,\n                uint96 buyAmountOfIter,\n                uint96 sellAmountOfIter\n            ) = _sellOrders[i].decodeOrder();\n            require(\n                userIdOfIter == userId,\n                \"Only the user can cancel his orders\"\n            );\n            if (\n                sellOrders[auctionId].remove(_sellOrders[i], _prevSellOrders[i])\n            ) {\n                claimableAmount = claimableAmount.add(buyAmountOfIter);\n                emit CancellationSellOrders(\n                    auctionId,\n                    userId,\n                    buyAmountOfIter,\n                    sellAmountOfIter\n                );\n            }\n        }\n        require(\n            auctionData[auctionId].buyToken.transfer(\n                msg.sender,\n                claimableAmount\n            ),\n            \"transfer was not successful\"\n        );\n    }\n\n    function verifyPrice(uint256 auctionId, bytes32 price)\n        public\n        atStageSolutionSubmission(auctionId)\n    {\n        (, uint96 priceNumerator, uint96 priceDenominator) =\n            price.decodeOrder();\n        (uint64 auctioneerId, uint96 buyAmount, uint96 sellAmount) =\n            auctionData[auctionId].initialAuctionOrder.decodeOrder();\n\n        require(priceNumerator > 0, \"price must be postive\");\n\n        // Calculate the bought volume of auctioneer's sell volume\n        uint256 sumSellAmount = 0;\n        bytes32 iterOrder = IterableOrderedOrderSet.QUEUE_START;\n        if (sellOrders[auctionId].size > 0) {\n            iterOrder = sellOrders[auctionId].next(iterOrder);\n\n            while (iterOrder != price && iterOrder.smallerThan(price)) {\n                (, , uint96 sellAmountOfIter) = iterOrder.decodeOrder();\n                sumSellAmount = sumSellAmount.add(sellAmountOfIter);\n                iterOrder = sellOrders[auctionId].next(iterOrder);\n            }\n        }\n        uint256 sumBuyAmount =\n            sumSellAmount.mul(priceNumerator).div(priceDenominator);\n        if (price == iterOrder) {\n            // case 1: one sellOrder is partically filled\n            // The partially filled order is the correct one, if:\n            // 1) The sum of buyAmounts is not bigger than the intitial order sell amount\n            // i.e, sellAmount >= sumBuyAmount\n            // 2) The volume of the particial order is not bigger than its sell volume\n            // i.e. auctionData[auctionId].volumeClearingPriceOrder <= sellAmountOfIter,\n            (, , uint96 sellAmountOfIter) = iterOrder.decodeOrder();\n            uint256 clearingOrderBuyAmount = sellAmount.sub(sumBuyAmount);\n            auctionData[auctionId].volumeClearingPriceOrder = uint96(\n                clearingOrderBuyAmount.mul(priceDenominator).div(priceNumerator)\n            );\n            require(\n                auctionData[auctionId].volumeClearingPriceOrder <=\n                    sellAmountOfIter,\n                \"order can not be clearing order\"\n            );\n            auctionData[auctionId].clearingPriceOrder = iterOrder;\n        } else {\n            if (sumBuyAmount < sellAmount) {\n                // case 2: initialAuction order is partically filled\n                // We require that the price was the initialOrderLimit price's inverse\n                // as this ensures that the for-loop iterated through all orders\n                // and all orders are considered\n                require(\n                    priceNumerator.mul(buyAmount) ==\n                        sellAmount.mul(priceDenominator),\n                    \"supplied price must be inverse initialOrderLimit\"\n                );\n                auctionData[auctionId].volumeClearingPriceOrder = uint96(\n                    sumBuyAmount\n                );\n                auctionData[auctionId]\n                    .clearingPriceOrder = IterableOrderedOrderSet.encodeOrder(\n                    auctioneerId,\n                    priceNumerator,\n                    priceDenominator\n                );\n            } else {\n                // case 3: no order is partically filled\n                // In this case the sumBuyAmount must be equal to\n                // the sellAmount of the initialAuctionOrder, without\n                // any rounding errors.\n                // This price is always existing as we can choose\n                // priceNumerator = sellAmount and priceDenominator = sumSellAmount\n                auctionData[auctionId].clearingPriceOrder = price;\n                require(\n                    sumBuyAmount == sellAmount,\n                    \"price is not clearing price\"\n                );\n                require(\n                    priceNumerator.mul(buyAmount) <=\n                        sellAmount.mul(priceDenominator),\n                    \"clearing price is better than initialAuctionOrder\"\n                );\n            }\n        }\n\n        uint256 submissionDelay =\n            block.timestamp.sub(auctionData[auctionId].auctionEndDate);\n        uint256 rewardFactor =\n            Math.min(\n                uint256(100000000).div(\n                    submissionDelay.mul(submissionDelay).add(1)\n                ),\n                10\n            );\n\n        emit AuctionCleared(\n            auctionId,\n            priceNumerator,\n            priceDenominator,\n            rewardFactor\n        );\n        claimAuctioneerFunds(auctionId, rewardFactor);\n    }\n\n    function claimFromParticipantOrder(\n        uint256 auctionId,\n        bytes32[] memory orders,\n        bytes32[] memory previousOrders\n    )\n        public\n        atStageFinished(auctionId)\n        returns (uint256 sellTokenAmount, uint256 buyTokenAmount)\n    {\n        AuctionData memory auction = auctionData[auctionId];\n        (, uint96 priceNumerator, uint96 priceDenominator) =\n            auction.clearingPriceOrder.decodeOrder();\n        for (uint256 i = 0; i < orders.length; i++) {\n            require(\n                sellOrders[auctionId].remove(orders[i], previousOrders[i]),\n                \"order is no longer claimable\"\n            );\n            (uint64 userId, , uint96 sellAmount) = orders[i].decodeOrder();\n            if (orders[i] == auction.clearingPriceOrder) {\n                sellTokenAmount = auction\n                    .volumeClearingPriceOrder\n                    .mul(priceNumerator)\n                    .div(priceDenominator);\n                buyTokenAmount = sellAmount.sub(\n                    auction.volumeClearingPriceOrder\n                );\n            } else {\n                if (orders[i].smallerThan(auction.clearingPriceOrder)) {\n                    sellTokenAmount = sellAmount.mul(priceNumerator).div(\n                        priceDenominator\n                    );\n                } else {\n                    buyTokenAmount = sellAmount;\n                }\n            }\n            sendOutTokens(auctionId, sellTokenAmount, buyTokenAmount, userId);\n        }\n    }\n\n    function claimAuctioneerFunds(uint256 auctionId, uint256 rewardFactor)\n        internal\n        returns (uint256 sellTokenAmount, uint256 buyTokenAmount)\n    {\n        (uint64 auctioneerId, uint96 buyAmount, uint96 sellAmount) =\n            auctionData[auctionId].initialAuctionOrder.decodeOrder();\n        auctionData[auctionId].initialAuctionOrder = bytes32(0);\n        (, uint96 priceNumerator, uint96 priceDenominator) =\n            auctionData[auctionId].clearingPriceOrder.decodeOrder();\n        if (priceNumerator.mul(buyAmount) == priceDenominator.mul(sellAmount)) {\n            // In this case we have a partial match of the initialSellOrder\n            sellTokenAmount = sellAmount.sub(\n                auctionData[auctionId].volumeClearingPriceOrder\n            );\n            buyTokenAmount = auctionData[auctionId]\n                .volumeClearingPriceOrder\n                .mul(priceDenominator)\n                .div(priceNumerator);\n        } else {\n            buyTokenAmount = sellAmount.mul(priceDenominator).div(\n                priceNumerator\n            );\n        }\n        sendOutTokens(\n            auctionId,\n            sellTokenAmount.mul(rewardFactor.sub(1)).div(rewardFactor),\n            buyTokenAmount.mul(rewardFactor.sub(1)).div(rewardFactor),\n            auctioneerId\n        );\n        sendOutTokens(\n            auctionId,\n            sellTokenAmount.div(rewardFactor),\n            buyTokenAmount.div(rewardFactor),\n            getUserId(msg.sender)\n        );\n    }\n\n    function sendOutTokens(\n        uint256 auctionId,\n        uint256 sellTokenAmount,\n        uint256 buyTokenAmount,\n        uint64 userId\n    ) internal {\n        address userAddress = registeredUsers.getAddressAt(userId);\n        require(\n            auctionData[auctionId].sellToken.transfer(\n                userAddress,\n                sellTokenAmount\n            ),\n            \"Claim transfer for sellToken failed\"\n        );\n        require(\n            auctionData[auctionId].buyToken.transfer(\n                userAddress,\n                buyTokenAmount\n            ),\n            \"Claim transfer for buyToken failed\"\n        );\n    }\n\n    function registerUser(address user) public returns (uint64 userId) {\n        require(\n            registeredUsers.insert(numUsers, user),\n            \"User already registered\"\n        );\n        userId = numUsers;\n        numUsers = numUsers.add(1).toUint64();\n        emit UserRegistration(user, userId);\n    }\n\n    function getUserId(address user) public returns (uint64 userId) {\n        if (registeredUsers.hasAddress(user)) {\n            return registeredUsers.getId(user);\n        } else {\n            return registerUser(user);\n        }\n    }\n\n    function getSecondsRemainingInBatch(uint256 auctionId)\n        public\n        view\n        returns (uint256)\n    {\n        if (auctionData[auctionId].auctionEndDate < block.timestamp) {\n            return 0;\n        }\n        return auctionData[auctionId].auctionEndDate.sub(block.timestamp);\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/ERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.6.0;\n\nimport \"../../GSN/Context.sol\";\nimport \"./IERC20.sol\";\nimport \"../../math/SafeMath.sol\";\nimport \"../../utils/Address.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin guidelines: functions revert instead\n * of returning `false` on failure. This behavior is nonetheless conventional\n * and does not conflict with the expectations of ERC20 applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20 {\n    using SafeMath for uint256;\n    using Address for address;\n\n    mapping (address => uint256) private _balances;\n\n    mapping (address => mapping (address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n    uint8 private _decimals;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\n     * a default value of 18.\n     *\n     * To select a different value for {decimals}, use {_setupDecimals}.\n     *\n     * All three of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor (string memory name, string memory symbol) public {\n        _name = name;\n        _symbol = symbol;\n        _decimals = 18;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\n     * called.\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view returns (uint8) {\n        return _decimals;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `recipient` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n        _transfer(_msgSender(), recipient, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        _approve(_msgSender(), spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20};\n     *\n     * Requirements:\n     * - `sender` and `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``sender``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\n        _transfer(sender, recipient, amount);\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\n        return true;\n    }\n\n    /**\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\n     *\n     * This is internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `sender` cannot be the zero address.\n     * - `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     */\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(sender, recipient, amount);\n\n        _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\n        _balances[recipient] = _balances[recipient].add(amount);\n        emit Transfer(sender, recipient, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements\n     *\n     * - `to` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply = _totalSupply.add(amount);\n        _balances[account] = _balances[account].add(amount);\n        emit Transfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        _balances[account] = _balances[account].sub(amount, \"ERC20: burn amount exceeds balance\");\n        _totalSupply = _totalSupply.sub(amount);\n        emit Transfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Sets {decimals} to a value other than the default one of 18.\n     *\n     * WARNING: This function should only be called from the constructor. Most\n     * applications that interact with token contracts will not expect\n     * {decimals} to ever change, and may work incorrectly if it does.\n     */\n    function _setupDecimals(uint8 decimals_) internal {\n        _decimals = decimals_;\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be to transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\n}\n"
    },
    "contracts/libraries/IterableOrderedOrderSet.sol": {
      "content": "// SPDX-License-Identifier: LGPL-3.0-or-newer\npragma solidity >=0.6.8;\n\nimport \"@openzeppelin/contracts/math/SafeMath.sol\";\n\nlibrary IterableOrderedOrderSet {\n    using SafeMath for uint96;\n    using IterableOrderedOrderSet for bytes32;\n    uint96 private constant MIN_RATE = uint96(0);\n    uint96 private constant MAX_RATE = uint96(-1);\n\n    // getValue(QUEUE_START) returns 0\n    bytes32 internal constant QUEUE_START =\n        0x0000000000000000000000000000000000000000000000000000000000000001;\n    // getValue(QUEUE_END) returns MaxValue in uint64\n    bytes32 internal constant QUEUE_END =\n        0xffffffffffffffffffffffffffffffffffffffff000000000000000000000001;\n\n    struct Data {\n        mapping(bytes32 => bytes32) nextMap;\n        uint256 size;\n    }\n\n    struct Order {\n        uint64 owner;\n        uint96 buyAmount;\n        uint96 sellAmount;\n    }\n\n    function insert(\n        Data storage self,\n        bytes32 elementToInsert,\n        bytes32 elmentBeforeNewOne\n    ) internal returns (bool) {\n        (, , uint96 denominator) = decodeOrder(elementToInsert);\n        require(denominator != uint96(0), \"Inserting zero is not supported\");\n\n        if (contains(self, elementToInsert)) {\n            return false;\n        }\n        bool foundposition = false;\n        if (self.size == 0) {\n            self.nextMap[QUEUE_START] = elementToInsert;\n            self.nextMap[elementToInsert] = QUEUE_END;\n        } else {\n            require(\n                elmentBeforeNewOne == QUEUE_START ||\n                    contains(self, elmentBeforeNewOne),\n                \"elmentBeforeNewOne must be valid order\"\n            );\n            bytes32 elmentBeforeNewOneNext = elmentBeforeNewOne;\n            while (!foundposition) {\n                if (elmentBeforeNewOneNext.smallerThan(elementToInsert)) {\n                    if (\n                        !self.nextMap[elmentBeforeNewOneNext].smallerThan(\n                            elementToInsert\n                        )\n                    ) {\n                        bytes32 tmp = self.nextMap[elmentBeforeNewOneNext];\n                        self.nextMap[elmentBeforeNewOneNext] = elementToInsert;\n                        self.nextMap[elementToInsert] = tmp;\n                        foundposition = true;\n                    } else {\n                        elmentBeforeNewOneNext = self.nextMap[\n                            elmentBeforeNewOneNext\n                        ];\n                    }\n                } else {\n                    return false; // elmentBeforeNewOne was incorrect\n                }\n            }\n        }\n        self.size++;\n        return true;\n    }\n\n    function remove(\n        Data storage self,\n        bytes32 elementToRemove,\n        bytes32 elementBeforeRemoval\n    ) internal returns (bool) {\n        if (!contains(self, elementToRemove)) {\n            return false;\n        }\n        bytes32 elementBeforeRemovalNext = elementBeforeRemoval;\n        while (self.nextMap[elementBeforeRemovalNext] != elementToRemove) {\n            if (elementBeforeRemovalNext == QUEUE_END) {\n                return false;\n            }\n            elementBeforeRemovalNext = self.nextMap[elementBeforeRemovalNext];\n        }\n        self.nextMap[elementBeforeRemovalNext] = self.nextMap[elementToRemove];\n        self.nextMap[elementToRemove] = bytes32(0);\n        self.size--;\n        return true;\n    }\n\n    function contains(Data storage self, bytes32 value)\n        internal\n        view\n        returns (bool)\n    {\n        if (value == QUEUE_START || value == QUEUE_END) {\n            return false;\n        }\n        return self.nextMap[value] != bytes32(0);\n    }\n\n    function smallerThan(bytes32 orderLeft, bytes32 orderRight)\n        internal\n        pure\n        returns (bool)\n    {\n        (\n            uint64 userIdLeft,\n            uint96 priceNumeratorLeft,\n            uint96 priceDenominatorLeft\n        ) = decodeOrder(orderLeft);\n        (\n            uint64 userIdRight,\n            uint96 priceNumeratorRight,\n            uint96 priceDenominatorRight\n        ) = decodeOrder(orderRight);\n\n        if (\n            priceNumeratorLeft.mul(priceDenominatorRight) <\n            priceNumeratorRight.mul(priceDenominatorLeft)\n        ) return true;\n        if (\n            priceNumeratorLeft.mul(priceDenominatorRight) >\n            priceNumeratorRight.mul(priceDenominatorLeft)\n        ) return false;\n\n        require(\n            userIdLeft != userIdRight,\n            \"user is not allowed to place same order twice\"\n        );\n        if (userIdLeft < userIdRight) {\n            return true;\n        }\n        return false;\n    }\n\n    function first(Data storage self) internal view returns (bytes32) {\n        require(self.size > 0, \"Trying to get first from empty set\");\n        return self.nextMap[QUEUE_START];\n    }\n\n    function next(Data storage self, bytes32 value)\n        internal\n        view\n        returns (bytes32)\n    {\n        require(\n            value != QUEUE_END,\n            \"Trying to get next of non-existent element\"\n        );\n        require(\n            self.nextMap[value] != bytes32(0),\n            \"Trying to get next of last element\"\n        );\n        return self.nextMap[value];\n    }\n\n    function decodeOrder(bytes32 _orderData)\n        internal\n        pure\n        returns (\n            uint64 userId,\n            uint96 buyAmount,\n            uint96 sellAmount\n        )\n    {\n        userId = uint64(uint256(_orderData) / 2**192);\n        buyAmount = uint96((uint256(_orderData) % 2**192) / 2**96);\n        sellAmount = uint96((uint256(_orderData) % 2**96));\n    }\n\n    function encodeOrder(\n        uint64 userId,\n        uint96 buyAmount,\n        uint96 sellAmount\n    ) internal pure returns (bytes32) {\n        return\n            bytes32(\n                uint256(userId) *\n                    2**192 +\n                    uint256(buyAmount) *\n                    2**96 +\n                    uint256(sellAmount)\n            );\n    }\n}\n"
    },
    "@openzeppelin/contracts/math/Math.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.6.0;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary Math {\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a >= b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow, so we distribute\n        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\n    }\n}\n"
    },
    "@openzeppelin/contracts/math/SafeMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.6.0;\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\n * checks.\n *\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\n * in bugs, because programmers usually assume that an overflow raises an\n * error, which is the standard behavior in high level programming languages.\n * `SafeMath` restores this intuition by reverting the transaction when an\n * operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts with custom message when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n}\n"
    },
    "contracts/libraries/IdToAddressBiMap.sol": {
      "content": "// SPDX-License-Identifier: LGPL-3.0-or-newer\npragma solidity ^0.6.0;\n\nlibrary IdToAddressBiMap {\n    struct Data {\n        mapping(uint64 => address) idToAddress;\n        mapping(address => uint64) addressToId;\n    }\n\n    function hasId(Data storage self, uint64 id) internal view returns (bool) {\n        return self.idToAddress[id + 1] != address(0);\n    }\n\n    function hasAddress(Data storage self, address addr)\n        internal\n        view\n        returns (bool)\n    {\n        return self.addressToId[addr] != 0;\n    }\n\n    function getAddressAt(Data storage self, uint64 id)\n        internal\n        view\n        returns (address)\n    {\n        require(hasId(self, id), \"Must have ID to get Address\");\n        return self.idToAddress[id + 1];\n    }\n\n    function getId(Data storage self, address addr)\n        internal\n        view\n        returns (uint64)\n    {\n        require(hasAddress(self, addr), \"Must have Address to get ID\");\n        return self.addressToId[addr] - 1;\n    }\n\n    function insert(\n        Data storage self,\n        uint64 id,\n        address addr\n    ) internal returns (bool) {\n        require(addr != address(0), \"Cannot insert zero address\");\n        require(id != uint64(-1), \"Cannot insert max uint64\");\n        // Ensure bijectivity of the mappings\n        if (\n            self.addressToId[addr] != 0 ||\n            self.idToAddress[id + 1] != address(0)\n        ) {\n            return false;\n        }\n        self.idToAddress[id + 1] = addr;\n        self.addressToId[addr] = id + 1;\n        return true;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/SafeCast.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.6.0;\n\n\n/**\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\n * checks.\n *\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\n * easily result in undesired exploitation or bugs, since developers usually\n * assume that overflows raise errors. `SafeCast` restores this intuition by\n * reverting the transaction when such an operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n *\n * Can be combined with {SafeMath} and {SignedSafeMath} to extend it to smaller types, by performing\n * all math on `uint256` and `int256` and then downcasting.\n */\nlibrary SafeCast {\n\n    /**\n     * @dev Returns the downcasted uint128 from uint256, reverting on\n     * overflow (when the input is greater than largest uint128).\n     *\n     * Counterpart to Solidity's `uint128` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 128 bits\n     */\n    function toUint128(uint256 value) internal pure returns (uint128) {\n        require(value < 2**128, \"SafeCast: value doesn\\'t fit in 128 bits\");\n        return uint128(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint64 from uint256, reverting on\n     * overflow (when the input is greater than largest uint64).\n     *\n     * Counterpart to Solidity's `uint64` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 64 bits\n     */\n    function toUint64(uint256 value) internal pure returns (uint64) {\n        require(value < 2**64, \"SafeCast: value doesn\\'t fit in 64 bits\");\n        return uint64(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint32 from uint256, reverting on\n     * overflow (when the input is greater than largest uint32).\n     *\n     * Counterpart to Solidity's `uint32` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 32 bits\n     */\n    function toUint32(uint256 value) internal pure returns (uint32) {\n        require(value < 2**32, \"SafeCast: value doesn\\'t fit in 32 bits\");\n        return uint32(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint16 from uint256, reverting on\n     * overflow (when the input is greater than largest uint16).\n     *\n     * Counterpart to Solidity's `uint16` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 16 bits\n     */\n    function toUint16(uint256 value) internal pure returns (uint16) {\n        require(value < 2**16, \"SafeCast: value doesn\\'t fit in 16 bits\");\n        return uint16(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint8 from uint256, reverting on\n     * overflow (when the input is greater than largest uint8).\n     *\n     * Counterpart to Solidity's `uint8` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 8 bits.\n     */\n    function toUint8(uint256 value) internal pure returns (uint8) {\n        require(value < 2**8, \"SafeCast: value doesn\\'t fit in 8 bits\");\n        return uint8(value);\n    }\n\n    /**\n     * @dev Converts a signed int256 into an unsigned uint256.\n     *\n     * Requirements:\n     *\n     * - input must be greater than or equal to 0.\n     */\n    function toUint256(int256 value) internal pure returns (uint256) {\n        require(value >= 0, \"SafeCast: value must be positive\");\n        return uint256(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int128 from int256, reverting on\n     * overflow (when the input is less than smallest int128 or\n     * greater than largest int128).\n     *\n     * Counterpart to Solidity's `int128` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 128 bits\n     *\n     * _Available since v3.1._\n     */\n    function toInt128(int256 value) internal pure returns (int128) {\n        require(value >= -2**127 && value < 2**127, \"SafeCast: value doesn\\'t fit in 128 bits\");\n        return int128(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int64 from int256, reverting on\n     * overflow (when the input is less than smallest int64 or\n     * greater than largest int64).\n     *\n     * Counterpart to Solidity's `int64` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 64 bits\n     *\n     * _Available since v3.1._\n     */\n    function toInt64(int256 value) internal pure returns (int64) {\n        require(value >= -2**63 && value < 2**63, \"SafeCast: value doesn\\'t fit in 64 bits\");\n        return int64(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int32 from int256, reverting on\n     * overflow (when the input is less than smallest int32 or\n     * greater than largest int32).\n     *\n     * Counterpart to Solidity's `int32` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 32 bits\n     *\n     * _Available since v3.1._\n     */\n    function toInt32(int256 value) internal pure returns (int32) {\n        require(value >= -2**31 && value < 2**31, \"SafeCast: value doesn\\'t fit in 32 bits\");\n        return int32(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int16 from int256, reverting on\n     * overflow (when the input is less than smallest int16 or\n     * greater than largest int16).\n     *\n     * Counterpart to Solidity's `int16` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 16 bits\n     *\n     * _Available since v3.1._\n     */\n    function toInt16(int256 value) internal pure returns (int16) {\n        require(value >= -2**15 && value < 2**15, \"SafeCast: value doesn\\'t fit in 16 bits\");\n        return int16(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int8 from int256, reverting on\n     * overflow (when the input is less than smallest int8 or\n     * greater than largest int8).\n     *\n     * Counterpart to Solidity's `int8` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 8 bits.\n     *\n     * _Available since v3.1._\n     */\n    function toInt8(int256 value) internal pure returns (int8) {\n        require(value >= -2**7 && value < 2**7, \"SafeCast: value doesn\\'t fit in 8 bits\");\n        return int8(value);\n    }\n\n    /**\n     * @dev Converts an unsigned uint256 into a signed int256.\n     *\n     * Requirements:\n     *\n     * - input must be less than or equal to maxInt256.\n     */\n    function toInt256(uint256 value) internal pure returns (int256) {\n        require(value < 2**255, \"SafeCast: value doesn't fit in an int256\");\n        return int256(value);\n    }\n}\n"
    },
    "@openzeppelin/contracts/GSN/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.6.0;\n\n/*\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with GSN meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address payable) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes memory) {\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n        return msg.data;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.6.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.6.2;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies in extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        // solhint-disable-next-line no-inline-assembly\n        assembly { size := extcodesize(account) }\n        return size > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n        (bool success, ) = recipient.call{ value: amount }(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain`call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n      return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n        return _functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        return _functionCallWithValue(target, data, value, errorMessage);\n    }\n\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\n        require(isContract(target), \"Address: call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                // solhint-disable-next-line no-inline-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "contracts/test/IterableOrderedOrderSetWrapper.sol": {
      "content": "// SPDX-License-Identifier: LGPL-3.0-or-newer\npragma solidity ^0.6.0;\nimport \"../libraries/IterableOrderedOrderSet.sol\";\n\ncontract IterableOrderedOrderSetWrapper {\n    using IterableOrderedOrderSet for IterableOrderedOrderSet.Data;\n\n    IterableOrderedOrderSet.Data public data;\n\n    function insert(bytes32 value) public returns (bool) {\n        return data.insert(value, IterableOrderedOrderSet.QUEUE_START);\n    }\n\n    function insertAt(bytes32 value, bytes32 at) public returns (bool) {\n        return data.insert(value, at);\n    }\n\n    function remove(bytes32 value) public returns (bool) {\n        return data.remove(value, IterableOrderedOrderSet.QUEUE_START);\n    }\n\n    function removeAt(bytes32 value, bytes32 at) public returns (bool) {\n        return data.remove(value, at);\n    }\n\n    function contains(bytes32 value) public view returns (bool) {\n        return data.contains(value);\n    }\n\n    function isEmpty() public view returns (bool) {\n        return data.size == 0;\n    }\n\n    function size() public view returns (uint256) {\n        return data.size;\n    }\n\n    function first() public view returns (bytes32) {\n        return data.first();\n    }\n\n    function next(bytes32 value) public view returns (bytes32) {\n        return data.next(value);\n    }\n\n    function decodeOrder(bytes32 value)\n        public\n        pure\n        returns (\n            uint64,\n            uint96,\n            uint96\n        )\n    {\n        return IterableOrderedOrderSet.decodeOrder(value);\n    }\n\n    function encodeOrder(\n        uint64 userId,\n        uint96 sellAmount,\n        uint96 buyAmount\n    ) public pure returns (bytes32) {\n        return\n            IterableOrderedOrderSet.encodeOrder(userId, sellAmount, buyAmount);\n    }\n\n    function smallerThan(bytes32 orderLeft, bytes32 orderRight)\n        public\n        pure\n        returns (bool)\n    {\n        return IterableOrderedOrderSet.smallerThan(orderLeft, orderRight);\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}